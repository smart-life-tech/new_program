
new_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f3c  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af0  08005af0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af8  08005af8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  08005b78  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08005b78  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a804  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec2  00000000  00000000  0003a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0003d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  0003e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c74  00000000  00000000  0003f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a32  00000000  00000000  00066484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2776  00000000  00000000  0007beb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e62c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f08  00000000  00000000  0015e67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000078 	.word	0x20000078
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004b9c 	.word	0x08004b9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	08004b9c 	.word	0x08004b9c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN7SSD1306C1Ev>:

extern I2C_HandleTypeDef hi2c1;


// Constructor
SSD1306::SSD1306()
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 fa5f 	bl	80009e4 <_ZN10SSD1306I2CC1Ev>
{
	/* Set default values */
	CurrentX = 0;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2200      	movs	r2, #0
 800052a:	801a      	strh	r2, [r3, #0]
	CurrentY = 0;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	805a      	strh	r2, [r3, #2]
	/* Initialized OK */
	Initialized = 1;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2201      	movs	r2, #1
 8000536:	711a      	strb	r2, [r3, #4]
}
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <_ZN7SSD130612SSD1306_InitEv>:


uint8_t SSD1306::SSD1306_Init()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK)
 800054c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000550:	2201      	movs	r2, #1
 8000552:	2178      	movs	r1, #120	; 0x78
 8000554:	4865      	ldr	r0, [pc, #404]	; (80006ec <_ZN7SSD130612SSD1306_InitEv+0x1a8>)
 8000556:	f001 fe39 	bl	80021cc <HAL_I2C_IsDeviceReady>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	bf14      	ite	ne
 8000560:	2301      	movne	r3, #1
 8000562:	2300      	moveq	r3, #0
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <_ZN7SSD130612SSD1306_InitEv+0x2a>
		return 0;		/* Return false */
 800056a:	2300      	movs	r3, #0
 800056c:	e0b9      	b.n	80006e2 <_ZN7SSD130612SSD1306_InitEv+0x19e>

	/* A little delay */
	uint32_t p = 2500;
 800056e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000572:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d003      	beq.n	8000582 <_ZN7SSD130612SSD1306_InitEv+0x3e>
		p--;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3b01      	subs	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000580:	e7f8      	b.n	8000574 <_ZN7SSD130612SSD1306_InitEv+0x30>

	/* Init LCD */
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAE); //display off
 8000582:	23ae      	movs	r3, #174	; 0xae
 8000584:	2200      	movs	r2, #0
 8000586:	2178      	movs	r1, #120	; 0x78
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 fa41 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x20); //Set Memory Addressing Mode
 800058e:	2320      	movs	r3, #32
 8000590:	2200      	movs	r2, #0
 8000592:	2178      	movs	r1, #120	; 0x78
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 fa3b 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800059a:	2310      	movs	r3, #16
 800059c:	2200      	movs	r2, #0
 800059e:	2178      	movs	r1, #120	; 0x78
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 fa35 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005a6:	23b0      	movs	r3, #176	; 0xb0
 80005a8:	2200      	movs	r2, #0
 80005aa:	2178      	movs	r1, #120	; 0x78
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 fa2f 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xC8); //Set COM Output Scan Direction
 80005b2:	23c8      	movs	r3, #200	; 0xc8
 80005b4:	2200      	movs	r2, #0
 80005b6:	2178      	movs	r1, #120	; 0x78
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 fa29 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00); //---set low column address
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2178      	movs	r1, #120	; 0x78
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 fa23 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x10); //---set high column address
 80005ca:	2310      	movs	r3, #16
 80005cc:	2200      	movs	r2, #0
 80005ce:	2178      	movs	r1, #120	; 0x78
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 fa1d 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x40); //--set start line address
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	2200      	movs	r2, #0
 80005da:	2178      	movs	r1, #120	; 0x78
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fa17 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x81); //--set contrast control register
 80005e2:	2381      	movs	r3, #129	; 0x81
 80005e4:	2200      	movs	r2, #0
 80005e6:	2178      	movs	r1, #120	; 0x78
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 fa11 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xFF);
 80005ee:	23ff      	movs	r3, #255	; 0xff
 80005f0:	2200      	movs	r2, #0
 80005f2:	2178      	movs	r1, #120	; 0x78
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 fa0b 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA1); //--set segment re-map 0 to 127
 80005fa:	23a1      	movs	r3, #161	; 0xa1
 80005fc:	2200      	movs	r2, #0
 80005fe:	2178      	movs	r1, #120	; 0x78
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 fa05 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA6); //--set normal display
 8000606:	23a6      	movs	r3, #166	; 0xa6
 8000608:	2200      	movs	r2, #0
 800060a:	2178      	movs	r1, #120	; 0x78
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f9ff 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA8); //--set multiplex ratio(1 to 64)
 8000612:	23a8      	movs	r3, #168	; 0xa8
 8000614:	2200      	movs	r2, #0
 8000616:	2178      	movs	r1, #120	; 0x78
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f9f9 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x3F); //
 800061e:	233f      	movs	r3, #63	; 0x3f
 8000620:	2200      	movs	r2, #0
 8000622:	2178      	movs	r1, #120	; 0x78
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f9f3 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800062a:	23a4      	movs	r3, #164	; 0xa4
 800062c:	2200      	movs	r2, #0
 800062e:	2178      	movs	r1, #120	; 0x78
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f9ed 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD3); //-set display offset
 8000636:	23d3      	movs	r3, #211	; 0xd3
 8000638:	2200      	movs	r2, #0
 800063a:	2178      	movs	r1, #120	; 0x78
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 f9e7 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00); //-not offset
 8000642:	2300      	movs	r3, #0
 8000644:	2200      	movs	r2, #0
 8000646:	2178      	movs	r1, #120	; 0x78
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f9e1 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 800064e:	23d5      	movs	r3, #213	; 0xd5
 8000650:	2200      	movs	r2, #0
 8000652:	2178      	movs	r1, #120	; 0x78
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f9db 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xF0); //--set divide ratio
 800065a:	23f0      	movs	r3, #240	; 0xf0
 800065c:	2200      	movs	r2, #0
 800065e:	2178      	movs	r1, #120	; 0x78
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f9d5 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xD9); //--set pre-charge period
 8000666:	23d9      	movs	r3, #217	; 0xd9
 8000668:	2200      	movs	r2, #0
 800066a:	2178      	movs	r1, #120	; 0x78
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f9cf 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x22); //
 8000672:	2322      	movs	r3, #34	; 0x22
 8000674:	2200      	movs	r2, #0
 8000676:	2178      	movs	r1, #120	; 0x78
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 f9c9 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xDA); //--set com pins hardware configuration
 800067e:	23da      	movs	r3, #218	; 0xda
 8000680:	2200      	movs	r2, #0
 8000682:	2178      	movs	r1, #120	; 0x78
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f9c3 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x12);
 800068a:	2312      	movs	r3, #18
 800068c:	2200      	movs	r2, #0
 800068e:	2178      	movs	r1, #120	; 0x78
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f9bd 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xDB); //--set vcomh
 8000696:	23db      	movs	r3, #219	; 0xdb
 8000698:	2200      	movs	r2, #0
 800069a:	2178      	movs	r1, #120	; 0x78
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f9b7 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x20); //0x20,0.77xVcc
 80006a2:	2320      	movs	r3, #32
 80006a4:	2200      	movs	r2, #0
 80006a6:	2178      	movs	r1, #120	; 0x78
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f9b1 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x8D); //--set DC-DC enable
 80006ae:	238d      	movs	r3, #141	; 0x8d
 80006b0:	2200      	movs	r2, #0
 80006b2:	2178      	movs	r1, #120	; 0x78
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 f9ab 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x14); //
 80006ba:	2314      	movs	r3, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	2178      	movs	r1, #120	; 0x78
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f9a5 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
	SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xAF); //--turn on SSD1306 panel
 80006c6:	23af      	movs	r3, #175	; 0xaf
 80006c8:	2200      	movs	r2, #0
 80006ca:	2178      	movs	r1, #120	; 0x78
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f99f 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80006d2:	2100      	movs	r1, #0
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f80b 	bl	80006f0 <_ZN7SSD130612SSD1306_FillEh>

	/* Update screen */
	SSD1306_UpdateScreen();
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f81f 	bl	800071e <_ZN7SSD130620SSD1306_UpdateScreenEv>

	return 1;
 80006e0:	2301      	movs	r3, #1
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000098 	.word	0x20000098

080006f0 <_ZN7SSD130612SSD1306_FillEh>:
 * @note   @ref SSD1306_UpdateScreen() must be called after that in order to see updated LCD screen
 * @param  Color: Color to be used for screen fill.
 * @retval None
 */
void SSD1306::SSD1306_Fill(uint8_t color)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	memset(Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(Buffer));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	1d98      	adds	r0, r3, #6
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <_ZN7SSD130612SSD1306_FillEh+0x1a>
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <_ZN7SSD130612SSD1306_FillEh+0x1c>
 800070a:	23ff      	movs	r3, #255	; 0xff
 800070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000710:	4619      	mov	r1, r3
 8000712:	f004 f8f9 	bl	8004908 <memset>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <_ZN7SSD130620SSD1306_UpdateScreenEv>:
 * @note   This function must be called each time you do some changes to LCD, to update buffer from RAM to LCD
 * @param  None
 * @retval None
 */
void SSD1306::SSD1306_UpdateScreen(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b086      	sub	sp, #24
 8000722:	af02      	add	r7, sp, #8
 8000724:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++)
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b07      	cmp	r3, #7
 800072e:	d823      	bhi.n	8000778 <_ZN7SSD130620SSD1306_UpdateScreenEv+0x5a>
	{
		SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0xB0 + m);
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	3b50      	subs	r3, #80	; 0x50
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2200      	movs	r2, #0
 8000738:	2178      	movs	r1, #120	; 0x78
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f968 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
		SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x00);
 8000740:	2300      	movs	r3, #0
 8000742:	2200      	movs	r2, #0
 8000744:	2178      	movs	r1, #120	; 0x78
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 f962 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>
		SSD1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, 0x10);
 800074c:	2310      	movs	r3, #16
 800074e:	2200      	movs	r2, #0
 8000750:	2178      	movs	r1, #120	; 0x78
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 f95c 	bl	8000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>

		/* Write multi data */
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	01db      	lsls	r3, r3, #7
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	3306      	adds	r3, #6
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	9200      	str	r2, [sp, #0]
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	2178      	movs	r1, #120	; 0x78
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f972 	bl	8000a54 <_ZN10SSD1306I2C22SSD1306_I2C_WriteMultiEhhPht>
	for (m = 0; m < 8; m++)
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	3301      	adds	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e7d8      	b.n	800072a <_ZN7SSD130620SSD1306_UpdateScreenEv+0xc>
	}
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <_ZN7SSD130614SSD1306_GotoXYEtt>:
 * @param  x: X location. This parameter can be a value between 0 and SSD1306_WIDTH - 1
 * @param  y: Y location. This parameter can be a value between 0 and SSD1306_HEIGHT - 1
 * @retval None
 */
void SSD1306::SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
 800078c:	4613      	mov	r3, r2
 800078e:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	CurrentX = x;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	887a      	ldrh	r2, [r7, #2]
 8000794:	801a      	strh	r2, [r3, #0]
	CurrentY = y;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	883a      	ldrh	r2, [r7, #0]
 800079a:	805a      	strh	r2, [r3, #2]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_ZN7SSD130612SSD1306_PutsEPcP9FontDef_th>:
 * @param  *Font: Pointer to @ref FontDef_t structure with used font
 * @param  color: Color used for drawing.
 * @retval Zero on success or character value when function failed
 */
char SSD1306::SSD1306_Puts(char* str, FontDef_t* Font, uint8_t color)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
 80007b4:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	while (*str)
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d018      	beq.n	80007f0 <_ZN7SSD130612SSD1306_PutsEPcP9FontDef_th+0x48>
	{
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str)
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	7819      	ldrb	r1, [r3, #0]
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f000 f818 	bl	80007fc <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	bf14      	ite	ne
 80007d8:	2301      	movne	r3, #1
 80007da:	2300      	moveq	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <_ZN7SSD130612SSD1306_PutsEPcP9FontDef_th+0x40>
			return *str;	/* Return error */
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	e005      	b.n	80007f4 <_ZN7SSD130612SSD1306_PutsEPcP9FontDef_th+0x4c>

		/* Increase string pointer */
		str++;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
	while (*str)
 80007ee:	e7e2      	b.n	80007b6 <_ZN7SSD130612SSD1306_PutsEPcP9FontDef_th+0xe>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th>:
 * @param  *Font: Pointer to @ref FontDef_t structure with used font
 * @param  color: Color used for drawing.
 * @retval Character written
 */
char SSD1306::SSD1306_Putc(char ch, FontDef_t* Font, uint8_t color)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	461a      	mov	r2, r3
 8000808:	460b      	mov	r3, r1
 800080a:	72fb      	strb	r3, [r7, #11]
 800080c:	4613      	mov	r3, r2
 800080e:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (SSD1306_WIDTH <= (CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (CurrentY + Font->FontHeight))
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	2b7f      	cmp	r3, #127	; 0x7f
 800081e:	dc07      	bgt.n	8000830 <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0x34>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	885b      	ldrh	r3, [r3, #2]
 8000824:	461a      	mov	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	4413      	add	r3, r2
 800082c:	2b3f      	cmp	r3, #63	; 0x3f
 800082e:	dd01      	ble.n	8000834 <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0x38>
		return 0;	/* Error */
 8000830:	2300      	movs	r3, #0
 8000832:	e05e      	b.n	80008f2 <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0xf6>

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	461a      	mov	r2, r3
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4293      	cmp	r3, r2
 8000842:	d24c      	bcs.n	80008de <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0xe2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	7afb      	ldrb	r3, [r7, #11]
 800084a:	3b20      	subs	r3, #32
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	7849      	ldrb	r1, [r1, #1]
 8000850:	fb01 f303 	mul.w	r3, r1, r3
 8000854:	4619      	mov	r1, r3
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	440b      	add	r3, r1
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++)
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	4293      	cmp	r3, r2
 8000870:	d231      	bcs.n	80008d6 <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0xda>
		{
			if ((b << j) & 0x8000)
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d010      	beq.n	80008a4 <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0xa8>
				SSD1306_DrawPixel(CurrentX + j, (CurrentY + i), color);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	b29b      	uxth	r3, r3
 800088a:	4413      	add	r3, r2
 800088c:	b299      	uxth	r1, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	885a      	ldrh	r2, [r3, #2]
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	b29b      	uxth	r3, r3
 8000896:	4413      	add	r3, r2
 8000898:	b29a      	uxth	r2, r3
 800089a:	7abb      	ldrb	r3, [r7, #10]
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f000 f82c 	bl	80008fa <_ZN7SSD130617SSD1306_DrawPixelEtth>
 80008a2:	e014      	b.n	80008ce <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0xd2>
			else
				SSD1306_DrawPixel(CurrentX + j, (CurrentY + i), !color);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	881a      	ldrh	r2, [r3, #0]
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	4413      	add	r3, r2
 80008ae:	b299      	uxth	r1, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	885a      	ldrh	r2, [r3, #2]
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	7abb      	ldrb	r3, [r7, #10]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f000 f816 	bl	80008fa <_ZN7SSD130617SSD1306_DrawPixelEtth>
		for (j = 0; j < Font->FontWidth; j++)
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	3301      	adds	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	e7c7      	b.n	8000866 <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0x6a>
	for (i = 0; i < Font->FontHeight; i++)
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3301      	adds	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
 80008dc:	e7ac      	b.n	8000838 <_ZN7SSD130612SSD1306_PutcEcP9FontDef_th+0x3c>
		}
	}

	/* Increase pointer */
	CurrentX += Font->FontWidth;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4413      	add	r3, r2
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80008f0:	7afb      	ldrb	r3, [r7, #11]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_ZN7SSD130617SSD1306_DrawPixelEtth>:
 * @param  y: Y location. This parameter can be a value between 0 and SSD1306_HEIGHT - 1
 * @param  color: Color to be used for screen fill.
 * @retval None
 */
void SSD1306::SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t color)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b085      	sub	sp, #20
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	4608      	mov	r0, r1
 8000904:	4611      	mov	r1, r2
 8000906:	461a      	mov	r2, r3
 8000908:	4603      	mov	r3, r0
 800090a:	817b      	strh	r3, [r7, #10]
 800090c:	460b      	mov	r3, r1
 800090e:	813b      	strh	r3, [r7, #8]
 8000910:	4613      	mov	r3, r2
 8000912:	71fb      	strb	r3, [r7, #7]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000914:	897b      	ldrh	r3, [r7, #10]
 8000916:	2b7f      	cmp	r3, #127	; 0x7f
 8000918:	d84e      	bhi.n	80009b8 <_ZN7SSD130617SSD1306_DrawPixelEtth+0xbe>
 800091a:	893b      	ldrh	r3, [r7, #8]
 800091c:	2b3f      	cmp	r3, #63	; 0x3f
 800091e:	d84b      	bhi.n	80009b8 <_ZN7SSD130617SSD1306_DrawPixelEtth+0xbe>
		return;		/* Error */

	/* Check if pixels are inverted */
	if (Inverted)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	795b      	ldrb	r3, [r3, #5]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <_ZN7SSD130617SSD1306_DrawPixelEtth+0x3c>
		color = !color;
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf0c      	ite	eq
 800092e:	2301      	moveq	r3, #1
 8000930:	2300      	movne	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	71fb      	strb	r3, [r7, #7]

	/* Set color */
	if (color == SSD1306_COLOR_WHITE)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d11d      	bne.n	8000978 <_ZN7SSD130617SSD1306_DrawPixelEtth+0x7e>
		Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800093c:	897a      	ldrh	r2, [r7, #10]
 800093e:	893b      	ldrh	r3, [r7, #8]
 8000940:	08db      	lsrs	r3, r3, #3
 8000942:	b298      	uxth	r0, r3
 8000944:	4603      	mov	r3, r0
 8000946:	01db      	lsls	r3, r3, #7
 8000948:	4413      	add	r3, r2
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4413      	add	r3, r2
 800094e:	799b      	ldrb	r3, [r3, #6]
 8000950:	b25a      	sxtb	r2, r3
 8000952:	893b      	ldrh	r3, [r7, #8]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	b25b      	sxtb	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b259      	sxtb	r1, r3
 8000964:	897a      	ldrh	r2, [r7, #10]
 8000966:	4603      	mov	r3, r0
 8000968:	01db      	lsls	r3, r3, #7
 800096a:	4413      	add	r3, r2
 800096c:	b2c9      	uxtb	r1, r1
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	460a      	mov	r2, r1
 8000974:	719a      	strb	r2, [r3, #6]
 8000976:	e020      	b.n	80009ba <_ZN7SSD130617SSD1306_DrawPixelEtth+0xc0>
	else
		Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000978:	897a      	ldrh	r2, [r7, #10]
 800097a:	893b      	ldrh	r3, [r7, #8]
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	b298      	uxth	r0, r3
 8000980:	4603      	mov	r3, r0
 8000982:	01db      	lsls	r3, r3, #7
 8000984:	4413      	add	r3, r2
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	4413      	add	r3, r2
 800098a:	799b      	ldrb	r3, [r3, #6]
 800098c:	b25a      	sxtb	r2, r3
 800098e:	893b      	ldrh	r3, [r7, #8]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	b25b      	sxtb	r3, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	4013      	ands	r3, r2
 80009a2:	b259      	sxtb	r1, r3
 80009a4:	897a      	ldrh	r2, [r7, #10]
 80009a6:	4603      	mov	r3, r0
 80009a8:	01db      	lsls	r3, r3, #7
 80009aa:	4413      	add	r3, r2
 80009ac:	b2c9      	uxtb	r1, r1
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4413      	add	r3, r2
 80009b2:	460a      	mov	r2, r1
 80009b4:	719a      	strb	r2, [r3, #6]
 80009b6:	e000      	b.n	80009ba <_ZN7SSD130617SSD1306_DrawPixelEtth+0xc0>
		return;		/* Error */
 80009b8:	bf00      	nop
}
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_ZN7SSD130613SSD1306_ClearEv>:

/**
 * @brief Clear the display
 */
void SSD1306::SSD1306_Clear(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	SSD1306_Fill(0);
 80009cc:	2100      	movs	r1, #0
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff fe8e 	bl	80006f0 <_ZN7SSD130612SSD1306_FillEh>
    SSD1306_UpdateScreen();
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fea2 	bl	800071e <_ZN7SSD130620SSD1306_UpdateScreenEv>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <_ZN10SSD1306I2CC1Ev>:

extern I2C_HandleTypeDef hi2c1;


// Constructor
SSD1306I2C::SSD1306I2C()
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
{
	uint32_t p = 250000;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <_ZN10SSD1306I2CC1Ev+0x28>)
 80009ee:	60fb      	str	r3, [r7, #12]
		while(p>0)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <_ZN10SSD1306I2CC1Ev+0x1a>
			p--;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
		while(p>0)
 80009fc:	e7f8      	b.n	80009f0 <_ZN10SSD1306I2CC1Ev+0xc>
}
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	0003d090 	.word	0x0003d090

08000a10 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh>:



void SSD1306I2C::SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af02      	add	r7, sp, #8
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	4608      	mov	r0, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4603      	mov	r3, r0
 8000a20:	70fb      	strb	r3, [r7, #3]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70bb      	strb	r3, [r7, #2]
 8000a26:	4613      	mov	r3, r2
 8000a28:	707b      	strb	r3, [r7, #1]
	uint8_t dt[2];
	dt[0] = reg;
 8000a2a:	78bb      	ldrb	r3, [r7, #2]
 8000a2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a2e:	787b      	ldrb	r3, [r7, #1]
 8000a30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	b299      	uxth	r1, r3
 8000a36:	f107 020c 	add.w	r2, r7, #12
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <_ZN10SSD1306I2C17SSD1306_I2C_WriteEhhh+0x40>)
 8000a42:	f001 fac5 	bl	8001fd0 <HAL_I2C_Master_Transmit>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000098 	.word	0x20000098

08000a54 <_ZN10SSD1306I2C22SSD1306_I2C_WriteMultiEhhPht>:



void SSD1306I2C::SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b0c9      	sub	sp, #292	; 0x124
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000a5e:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8000a62:	6020      	str	r0, [r4, #0]
 8000a64:	4608      	mov	r0, r1
 8000a66:	4611      	mov	r1, r2
 8000a68:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000a6c:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a76:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a82:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8000a86:	460a      	mov	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000a8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a92:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000a96:	f5a2 7287 	sub.w	r2, r2, #270	; 0x10e
 8000a9a:	7812      	ldrb	r2, [r2, #0]
 8000a9c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000aa4:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000aa8:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8000aac:	429a      	cmp	r2, r3
 8000aae:	da16      	bge.n	8000ade <_ZN10SSD1306I2C22SSD1306_I2C_WriteMultiEhhPht+0x8a>
		dt[i+1] = data[i];
 8000ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000ab4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000ab8:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	441a      	add	r2, r3
 8000ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	7811      	ldrb	r1, [r2, #0]
 8000ac8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000acc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000ad0:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000adc:	e7e2      	b.n	8000aa4 <_ZN10SSD1306I2C22SSD1306_I2C_WriteMultiEhhPht+0x50>

	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000ade:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ae2:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b299      	uxth	r1, r3
 8000aea:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8000aee:	3301      	adds	r3, #1
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	f107 0214 	add.w	r2, r7, #20
 8000af6:	200a      	movs	r0, #10
 8000af8:	9000      	str	r0, [sp, #0]
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <_ZN10SSD1306I2C22SSD1306_I2C_WriteMultiEhhPht+0xb8>)
 8000afc:	f001 fa68 	bl	8001fd0 <HAL_I2C_Master_Transmit>
}
 8000b00:	bf00      	nop
 8000b02:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000098 	.word	0x20000098

08000b10 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	0fdb      	lsrs	r3, r3, #31
 8000b1e:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <_ZNSt7__cxx119to_stringEi+0x1c>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	425b      	negs	r3, r3
 8000b2a:	e000      	b.n	8000b2e <_ZNSt7__cxx119to_stringEi+0x1e>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8000b30:	210a      	movs	r1, #10
 8000b32:	6938      	ldr	r0, [r7, #16]
 8000b34:	f000 fafd 	bl	8001132 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8000b38:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8000b3a:	7dfa      	ldrb	r2, [r7, #23]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	18d4      	adds	r4, r2, r3
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fbf7 	bl	8004338 <_ZNSaIcEC1Ev>
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	222d      	movs	r2, #45	; 0x2d
 8000b50:	4621      	mov	r1, r4
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f003 fcc5 	bl	80044e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fbec 	bl	800433a <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	4619      	mov	r1, r3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f003 fce4 	bl	8004534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	68f9      	ldr	r1, [r7, #12]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fb1c 	bl	80011b0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8000b78:	bf00      	nop
  }
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	371c      	adds	r7, #28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}
	...

08000b84 <_Z10microDelayt>:
#define DIR_PORT GPIOA
#define STEP_PIN GPIO_PIN_4
#define STEP_PORT GPIOA

void microDelay (uint16_t delay)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <_Z10microDelayt+0x38>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <_Z10microDelayt+0x38>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	bf34      	ite	cc
 8000ba2:	2301      	movcc	r3, #1
 8000ba4:	2300      	movcs	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d000      	beq.n	8000bae <_Z10microDelayt+0x2a>
 8000bac:	e7f3      	b.n	8000b96 <_Z10microDelayt+0x12>
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000140 	.word	0x20000140

08000bc0 <_Z4stepiht>:

void step (int steps, uint8_t direction, uint16_t delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	803b      	strh	r3, [r7, #0]
  if (direction == 0)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d105      	bne.n	8000be2 <_Z4stepiht+0x22>
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4816      	ldr	r0, [pc, #88]	; (8000c34 <_Z4stepiht+0x74>)
 8000bdc:	f001 f89a 	bl	8001d14 <HAL_GPIO_WritePin>
 8000be0:	e004      	b.n	8000bec <_Z4stepiht+0x2c>
  else
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2102      	movs	r1, #2
 8000be6:	4813      	ldr	r0, [pc, #76]	; (8000c34 <_Z4stepiht+0x74>)
 8000be8:	f001 f894 	bl	8001d14 <HAL_GPIO_WritePin>
  for(x=0; x<steps; x=x+1)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <_Z4stepiht+0x78>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_Z4stepiht+0x78>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dd17      	ble.n	8000c2c <_Z4stepiht+0x6c>
  {
    HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2110      	movs	r1, #16
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <_Z4stepiht+0x74>)
 8000c02:	f001 f887 	bl	8001d14 <HAL_GPIO_WritePin>
    microDelay(delay);
 8000c06:	883b      	ldrh	r3, [r7, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffbb 	bl	8000b84 <_Z10microDelayt>
    HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2110      	movs	r1, #16
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <_Z4stepiht+0x74>)
 8000c14:	f001 f87e 	bl	8001d14 <HAL_GPIO_WritePin>
    microDelay(delay);
 8000c18:	883b      	ldrh	r3, [r7, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffb2 	bl	8000b84 <_Z10microDelayt>
  for(x=0; x<steps; x=x+1)
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <_Z4stepiht+0x78>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <_Z4stepiht+0x78>)
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e7e2      	b.n	8000bf2 <_Z4stepiht+0x32>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40020000 	.word	0x40020000
 8000c38:	20000094 	.word	0x20000094

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f000 fd2a 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */
 // SSD1306_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f87e 	bl	8000d48 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 f9f0 	bl	8001030 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c50:	f000 f9c0 	bl	8000fd4 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000c54:	f000 f8fa 	bl	8000e4c <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 8000c58:	f000 f92c 	bl	8000eb4 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 8000c5c:	f000 f95e 	bl	8000f1c <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
SSD1306 DISPLAY;
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fc57 	bl	8000518 <_ZN7SSD1306C1Ev>
  HAL_TIM_Base_Start(&htim2);
 8000c6a:	4833      	ldr	r0, [pc, #204]	; (8000d38 <main+0xfc>)
 8000c6c:	f002 fc6e 	bl	800354c <HAL_TIM_Base_Start>
  DISPLAY.SSD1306_Init();
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fc65 	bl	8000544 <_ZN7SSD130612SSD1306_InitEv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int y;

	      for(y=0; y<8; y=y+1) // 8 times
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8000c80:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8000c84:	2b07      	cmp	r3, #7
 8000c86:	dc4a      	bgt.n	8000d1e <main+0xe2>
	      {
	          DISPLAY.SSD1306_Clear();
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe99 	bl	80009c4 <_ZN7SSD130613SSD1306_ClearEv>

	          // Update the step count
	          std::string displayStr = "steps: " + std::to_string(x);
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <main+0x100>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff37 	bl	8000b10 <_ZNSt7__cxx119to_stringEi>
 8000ca2:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8000ca6:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8000caa:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8000cae:	4924      	ldr	r1, [pc, #144]	; (8000d40 <main+0x104>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fad3 	bl	800125c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8000cb6:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fc34 	bl	8004528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	          step(25, 0, 800); // 25 steps (45 degrees) CCV
 8000cc0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2019      	movs	r0, #25
 8000cc8:	f7ff ff7a 	bl	8000bc0 <_Z4stepiht>
	          DISPLAY.SSD1306_GotoXY(0, 0);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd53 	bl	8000780 <_ZN7SSD130614SSD1306_GotoXYEtt>
	          DISPLAY.SSD1306_UpdateScreen();
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd1d 	bl	800071e <_ZN7SSD130620SSD1306_UpdateScreenEv>
	          DISPLAY.SSD1306_Puts(const_cast<char*>(displayStr.c_str()), &Font_11x18, 0x01);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fcce 	bl	8004688 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000cec:	4601      	mov	r1, r0
 8000cee:	f107 001c 	add.w	r0, r7, #28
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <main+0x108>)
 8000cf6:	f7ff fd57 	bl	80007a8 <_ZN7SSD130612SSD1306_PutsEPcP9FontDef_th>
	          DISPLAY.SSD1306_UpdateScreen();
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fd0d 	bl	800071e <_ZN7SSD130620SSD1306_UpdateScreenEv>

	          HAL_Delay(100);
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f000 fd3b 	bl	8001780 <HAL_Delay>
	          std::string displayStr = "steps: " + std::to_string(x);
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fc0b 	bl	8004528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	      for(y=0; y<8; y=y+1) // 8 times
 8000d12:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8000d16:	3301      	adds	r3, #1
 8000d18:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8000d1c:	e7b0      	b.n	8000c80 <main+0x44>
	      }
	      step(800, 1, 5000); // 800 steps (4 revolutions ) CV
 8000d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d22:	2101      	movs	r1, #1
 8000d24:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000d28:	f7ff ff4a 	bl	8000bc0 <_Z4stepiht>
	      HAL_Delay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f000 fd26 	bl	8001780 <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000d34:	e7a1      	b.n	8000c7a <main+0x3e>
 8000d36:	bf00      	nop
 8000d38:	20000140 	.word	0x20000140
 8000d3c:	20000094 	.word	0x20000094
 8000d40:	08004bb4 	.word	0x08004bb4
 8000d44:	20000000 	.word	0x20000000

08000d48 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	; 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	2234      	movs	r2, #52	; 0x34
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 fdd6 	bl	8004908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <_Z18SystemClock_Configv+0xfc>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	4a33      	ldr	r2, [pc, #204]	; (8000e44 <_Z18SystemClock_Configv+0xfc>)
 8000d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7c:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <_Z18SystemClock_Configv+0xfc>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <_Z18SystemClock_Configv+0x100>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2d      	ldr	r2, [pc, #180]	; (8000e48 <_Z18SystemClock_Configv+0x100>)
 8000d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <_Z18SystemClock_Configv+0x100>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dac:	2310      	movs	r3, #16
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000db8:	2308      	movs	r3, #8
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000dbc:	23b4      	movs	r3, #180	; 0xb4
 8000dbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 f8cd 	bl	8002f70 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf14      	ite	ne
 8000ddc:	2301      	movne	r3, #1
 8000dde:	2300      	moveq	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000de6:	f000 f99f 	bl	8001128 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dea:	f001 fd27 	bl	800283c <HAL_PWREx_EnableOverDrive>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000dfe:	f000 f993 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fd5b 	bl	80028dc <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8000e36:	f000 f977 	bl	8001128 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3750      	adds	r7, #80	; 0x50
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <_ZL12MX_I2C1_Initv+0x60>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e58:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <_ZL12MX_I2C1_Initv+0x64>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e8a:	f000 ff5d 	bl	8001d48 <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf14      	ite	ne
 8000e94:	2301      	movne	r3, #1
 8000e96:	2300      	moveq	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000e9e:	f000 f943 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000098 	.word	0x20000098
 8000eac:	40005400 	.word	0x40005400
 8000eb0:	00061a80 	.word	0x00061a80

08000eb4 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000eba:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <_ZL12MX_I2C2_Initv+0x60>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ec0:	4a15      	ldr	r2, [pc, #84]	; (8000f18 <_ZL12MX_I2C2_Initv+0x64>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ed6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ef0:	4807      	ldr	r0, [pc, #28]	; (8000f10 <_ZL12MX_I2C2_Initv+0x5c>)
 8000ef2:	f000 ff29 	bl	8001d48 <HAL_I2C_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bf14      	ite	ne
 8000efc:	2301      	movne	r3, #1
 8000efe:	2300      	moveq	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000f06:	f000 f90f 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000ec 	.word	0x200000ec
 8000f14:	40005800 	.word	0x40005800
 8000f18:	00061a80 	.word	0x00061a80

08000f1c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f42:	2248      	movs	r2, #72	; 0x48
 8000f44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f60:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f62:	f002 faa3 	bl	80034ac <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf14      	ite	ne
 8000f6c:	2301      	movne	r3, #1
 8000f6e:	2300      	moveq	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000f76:	f000 f8d7 	bl	8001128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4619      	mov	r1, r3
 8000f86:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000f88:	f002 fc50 	bl	800382c <HAL_TIM_ConfigClockSource>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf14      	ite	ne
 8000f92:	2301      	movne	r3, #1
 8000f94:	2300      	moveq	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000f9c:	f000 f8c4 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000fae:	f002 fe71 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000fc2:	f000 f8b1 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000140 	.word	0x20000140

08000fd4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x54>)
 800100c:	f002 fed2 	bl	8003db4 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf14      	ite	ne
 8001016:	2301      	movne	r3, #1
 8001018:	2300      	moveq	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001020:	f000 f882 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000188 	.word	0x20000188
 800102c:	40004400 	.word	0x40004400

08001030 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a33      	ldr	r2, [pc, #204]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a2c      	ldr	r2, [pc, #176]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a1e      	ldr	r2, [pc, #120]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <_ZL12MX_GPIO_Initv+0xec>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2132      	movs	r1, #50	; 0x32
 80010ba:	4819      	ldr	r0, [pc, #100]	; (8001120 <_ZL12MX_GPIO_Initv+0xf0>)
 80010bc:	f000 fe2a 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <_ZL12MX_GPIO_Initv+0xf4>)
 80010d8:	f000 fc88 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|LD2_Pin;
 80010dc:	2322      	movs	r3, #34	; 0x22
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <_ZL12MX_GPIO_Initv+0xf0>)
 80010f4:	f000 fc7a 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_Pin */
  GPIO_InitStruct.Pin = STEP_Pin;
 80010f8:	2310      	movs	r3, #16
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <_ZL12MX_GPIO_Initv+0xf0>)
 8001110:	f000 fc6c 	bl	80019ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020800 	.word	0x40020800

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	e7fe      	b.n	8001130 <Error_Handler+0x8>

08001132 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8001132:	b480      	push	{r7}
 8001134:	b087      	sub	sp, #28
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	fb03 f303 	mul.w	r3, r3, r3
 8001146:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d201      	bcs.n	8001168 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	e01d      	b.n	80011a4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d202      	bcs.n	8001176 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	e016      	b.n	80011a4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	429a      	cmp	r2, r3
 800117c:	d202      	bcs.n	8001184 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3302      	adds	r3, #2
 8001182:	e00f      	b.n	80011a4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	429a      	cmp	r2, r3
 800118a:	d202      	bcs.n	8001192 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3303      	adds	r3, #3
 8001190:	e008      	b.n	80011a4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3304      	adds	r3, #4
 80011a0:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 80011a2:	e7db      	b.n	800115c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 80011a4:	4618      	mov	r0, r3
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3b01      	subs	r3, #1
 80011c0:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b63      	cmp	r3, #99	; 0x63
 80011c6:	d925      	bls.n	8001214 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80011cc:	fba3 1302 	umull	r1, r3, r3, r2
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	2164      	movs	r1, #100	; 0x64
 80011d4:	fb01 f303 	mul.w	r3, r1, r3
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	440b      	add	r3, r1
 80011f4:	4918      	ldr	r1, [pc, #96]	; (8001258 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80011f6:	5c8a      	ldrb	r2, [r1, r2]
 80011f8:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4413      	add	r3, r2
 8001202:	4915      	ldr	r1, [pc, #84]	; (8001258 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	440a      	add	r2, r1
 8001208:	7812      	ldrb	r2, [r2, #0]
 800120a:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	3b02      	subs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001212:	e7d6      	b.n	80011c2 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d910      	bls.n	800123c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	490b      	ldr	r1, [pc, #44]	; (8001258 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800122a:	5c8a      	ldrb	r2, [r1, r2]
 800122c:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	4413      	add	r3, r2
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 800123a:	e005      	b.n	8001248 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	3330      	adds	r3, #48	; 0x30
 8001242:	b2da      	uxtb	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	701a      	strb	r2, [r3, #0]
    }
 8001248:	bf00      	nop
 800124a:	3724      	adds	r7, #36	; 0x24
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	51eb851f 	.word	0x51eb851f
 8001258:	08005918 	.word	0x08005918

0800125c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f003 f9fb 	bl	8004668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001272:	4603      	mov	r3, r0
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f809 	bl	800128c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800127a:	4603      	mov	r3, r0
 800127c:	4619      	mov	r1, r3
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f003 f938 	bl	80044f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012e2:	2007      	movs	r0, #7
 80012e4:	f000 fb40 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a42      	ldr	r2, [pc, #264]	; (800141c <HAL_I2C_MspInit+0x128>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12c      	bne.n	8001370 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a40      	ldr	r2, [pc, #256]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DISPLAY_SCL_Pin|DISPLAY_SDA_Pin;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001336:	2312      	movs	r3, #18
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133a:	2301      	movs	r3, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001342:	2304      	movs	r3, #4
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4835      	ldr	r0, [pc, #212]	; (8001424 <HAL_I2C_MspInit+0x130>)
 800134e:	f000 fb4d 	bl	80019ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	4b32      	ldr	r3, [pc, #200]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a31      	ldr	r2, [pc, #196]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 800135c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800136e:	e050      	b.n	8001412 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <HAL_I2C_MspInit+0x134>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d14b      	bne.n	8001412 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a27      	ldr	r2, [pc, #156]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_SCL_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b8:	2312      	movs	r3, #18
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013c4:	2304      	movs	r3, #4
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_SCL_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4815      	ldr	r0, [pc, #84]	; (8001424 <HAL_I2C_MspInit+0x130>)
 80013d0:	f000 fb0c 	bl	80019ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_SDA_Pin;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013da:	2312      	movs	r3, #18
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013e6:	2304      	movs	r3, #4
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER_SDA_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	480e      	ldr	r0, [pc, #56]	; (800142c <HAL_I2C_MspInit+0x138>)
 80013f2:	f000 fafb 	bl	80019ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 8001400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_I2C_MspInit+0x12c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40005400 	.word	0x40005400
 8001420:	40023800 	.word	0x40023800
 8001424:	40020400 	.word	0x40020400
 8001428:	40005800 	.word	0x40005800
 800142c:	40020800 	.word	0x40020800

08001430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001440:	d115      	bne.n	800146e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	201c      	movs	r0, #28
 8001464:	f000 fa8b 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001468:	201c      	movs	r0, #28
 800146a:	f000 faa4 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_UART_MspInit+0x84>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12b      	bne.n	80014f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_UART_MspInit+0x88>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_UART_MspInit+0x88>)
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_UART_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_UART_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_UART_MspInit+0x88>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_UART_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e6:	2307      	movs	r3, #7
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <HAL_UART_MspInit+0x8c>)
 80014f2:	f000 fa7b 	bl	80019ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40004400 	.word	0x40004400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f8f2 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <TIM2_IRQHandler+0x10>)
 8001566:	f002 f859 	bl	800361c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000140 	.word	0x20000140

08001574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_kill>:

int _kill(int pid, int sig)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158e:	f003 f959 	bl	8004844 <__errno>
 8001592:	4603      	mov	r3, r0
 8001594:	2216      	movs	r2, #22
 8001596:	601a      	str	r2, [r3, #0]
  return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_exit>:

void _exit (int status)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ffe7 	bl	8001584 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b6:	e7fe      	b.n	80015b6 <_exit+0x12>

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f003 f92c 	bl	8004844 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20020000 	.word	0x20020000
 8001618:	00000400 	.word	0x00000400
 800161c:	200001cc 	.word	0x200001cc
 8001620:	200001e8 	.word	0x200001e8

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001672:	f7ff ffd7 	bl	8001624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f003 f8eb 	bl	8004850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fadf 	bl	8000c3c <main>
  bx  lr    
 800167e:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8001680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800168c:	08005b00 	.word	0x08005b00
  ldr r2, =_sbss
 8001690:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001694:	200001e8 	.word	0x200001e8

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f94f 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fde8 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f967 	bl	80019d2 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f92f 	bl	800197e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000008 	.word	0x20000008
 8001738:	20000010 	.word	0x20000010
 800173c:	2000000c 	.word	0x2000000c

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000010 	.word	0x20000010
 8001764:	200001d0 	.word	0x200001d0

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200001d0 	.word	0x200001d0

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000010 	.word	0x20000010

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f7ff ff8e 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff29 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff3e 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff8e 	bl	80018bc <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5d 	bl	8001868 <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff31 	bl	800182c <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa2 	bl	8001924 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e165      	b.n	8001cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8154 	bne.w	8001cce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d005      	beq.n	8001a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d130      	bne.n	8001aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 0201 	and.w	r2, r3, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d017      	beq.n	8001adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ae 	beq.w	8001cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a5c      	ldr	r2, [pc, #368]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <HAL_GPIO_Init+0x300>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8e:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4f      	ldr	r2, [pc, #316]	; (8001cf4 <HAL_GPIO_Init+0x308>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d025      	beq.n	8001c06 <HAL_GPIO_Init+0x21a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4e      	ldr	r2, [pc, #312]	; (8001cf8 <HAL_GPIO_Init+0x30c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01f      	beq.n	8001c02 <HAL_GPIO_Init+0x216>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4d      	ldr	r2, [pc, #308]	; (8001cfc <HAL_GPIO_Init+0x310>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_GPIO_Init+0x212>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_GPIO_Init+0x314>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x20e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4b      	ldr	r2, [pc, #300]	; (8001d04 <HAL_GPIO_Init+0x318>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x20a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4a      	ldr	r2, [pc, #296]	; (8001d08 <HAL_GPIO_Init+0x31c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x206>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a49      	ldr	r2, [pc, #292]	; (8001d0c <HAL_GPIO_Init+0x320>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x202>
 8001bea:	2306      	movs	r3, #6
 8001bec:	e00c      	b.n	8001c08 <HAL_GPIO_Init+0x21c>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e00a      	b.n	8001c08 <HAL_GPIO_Init+0x21c>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e008      	b.n	8001c08 <HAL_GPIO_Init+0x21c>
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x21c>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e004      	b.n	8001c08 <HAL_GPIO_Init+0x21c>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_Init+0x21c>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x21c>
 8001c06:	2300      	movs	r3, #0
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f002 0203 	and.w	r2, r2, #3
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	4093      	lsls	r3, r2
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c18:	4935      	ldr	r1, [pc, #212]	; (8001cf0 <HAL_GPIO_Init+0x304>)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4a:	4a31      	ldr	r2, [pc, #196]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c50:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7a:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc8:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	f67f ae96 	bls.w	8001a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40021400 	.word	0x40021400
 8001d0c:	40021800 	.word	0x40021800
 8001d10:	40013c00 	.word	0x40013c00

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	619a      	str	r2, [r3, #24]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e12b      	b.n	8001fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fac0 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	; 0x24
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dac:	f000 fe88 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8001db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a81      	ldr	r2, [pc, #516]	; (8001fbc <HAL_I2C_Init+0x274>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d807      	bhi.n	8001dcc <HAL_I2C_Init+0x84>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a80      	ldr	r2, [pc, #512]	; (8001fc0 <HAL_I2C_Init+0x278>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e006      	b.n	8001dda <HAL_I2C_Init+0x92>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a7d      	ldr	r2, [pc, #500]	; (8001fc4 <HAL_I2C_Init+0x27c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	bf94      	ite	ls
 8001dd4:	2301      	movls	r3, #1
 8001dd6:	2300      	movhi	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0e7      	b.n	8001fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4a78      	ldr	r2, [pc, #480]	; (8001fc8 <HAL_I2C_Init+0x280>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0c9b      	lsrs	r3, r3, #18
 8001dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_I2C_Init+0x274>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d802      	bhi.n	8001e1c <HAL_I2C_Init+0xd4>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	e009      	b.n	8001e30 <HAL_I2C_Init+0xe8>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_I2C_Init+0x284>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	3301      	adds	r3, #1
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	495c      	ldr	r1, [pc, #368]	; (8001fbc <HAL_I2C_Init+0x274>)
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	d819      	bhi.n	8001e84 <HAL_I2C_Init+0x13c>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e59      	subs	r1, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5e:	1c59      	adds	r1, r3, #1
 8001e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e64:	400b      	ands	r3, r1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_I2C_Init+0x138>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1e59      	subs	r1, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7e:	e051      	b.n	8001f24 <HAL_I2C_Init+0x1dc>
 8001e80:	2304      	movs	r3, #4
 8001e82:	e04f      	b.n	8001f24 <HAL_I2C_Init+0x1dc>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d111      	bne.n	8001eb0 <HAL_I2C_Init+0x168>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e58      	subs	r0, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e012      	b.n	8001ed6 <HAL_I2C_Init+0x18e>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e58      	subs	r0, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	0099      	lsls	r1, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Init+0x196>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e022      	b.n	8001f24 <HAL_I2C_Init+0x1dc>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10e      	bne.n	8001f04 <HAL_I2C_Init+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e58      	subs	r0, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	440b      	add	r3, r1
 8001ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f02:	e00f      	b.n	8001f24 <HAL_I2C_Init+0x1dc>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	0099      	lsls	r1, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	6809      	ldr	r1, [r1, #0]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6911      	ldr	r1, [r2, #16]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68d2      	ldr	r2, [r2, #12]
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	000186a0 	.word	0x000186a0
 8001fc0:	001e847f 	.word	0x001e847f
 8001fc4:	003d08ff 	.word	0x003d08ff
 8001fc8:	431bde83 	.word	0x431bde83
 8001fcc:	10624dd3 	.word	0x10624dd3

08001fd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	460b      	mov	r3, r1
 8001fde:	817b      	strh	r3, [r7, #10]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fbc0 	bl	8001768 <HAL_GetTick>
 8001fe8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	f040 80e0 	bne.w	80021b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2319      	movs	r3, #25
 8001ffe:	2201      	movs	r2, #1
 8002000:	4970      	ldr	r1, [pc, #448]	; (80021c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fa92 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	e0d3      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_I2C_Master_Transmit+0x50>
 800201c:	2302      	movs	r3, #2
 800201e:	e0cc      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d007      	beq.n	8002046 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2221      	movs	r2, #33	; 0x21
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2210      	movs	r2, #16
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	893a      	ldrh	r2, [r7, #8]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f9ca 	bl	8002428 <I2C_MasterRequestWrite>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e08d      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020b4:	e066      	b.n	8002184 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fb0c 	bl	80026d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d107      	bne.n	80020de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b04      	cmp	r3, #4
 800211e:	d11b      	bne.n	8002158 <HAL_I2C_Master_Transmit+0x188>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d017      	beq.n	8002158 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	6a39      	ldr	r1, [r7, #32]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fafc 	bl	800275a <I2C_WaitOnBTFFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b04      	cmp	r3, #4
 800216e:	d107      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e01a      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d194      	bne.n	80020b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	00100002 	.word	0x00100002
 80021c8:	ffff0000 	.word	0xffff0000

080021cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fac4 	bl	8001768 <HAL_GetTick>
 80021e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	f040 8111 	bne.w	8002416 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2319      	movs	r3, #25
 80021fa:	2201      	movs	r2, #1
 80021fc:	4988      	ldr	r1, [pc, #544]	; (8002420 <HAL_I2C_IsDeviceReady+0x254>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f994 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	e104      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_I2C_IsDeviceReady+0x50>
 8002218:	2302      	movs	r3, #2
 800221a:	e0fd      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d007      	beq.n	8002242 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2224      	movs	r2, #36	; 0x24
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a70      	ldr	r2, [pc, #448]	; (8002424 <HAL_I2C_IsDeviceReady+0x258>)
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2200      	movs	r2, #0
 800227e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f952 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229c:	d103      	bne.n	80022a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0b6      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022ba:	f7ff fa55 	bl	8001768 <HAL_GetTick>
 80022be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022ee:	e025      	b.n	800233c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022f0:	f7ff fa3a 	bl	8001768 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <HAL_I2C_IsDeviceReady+0x13a>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	22a0      	movs	r2, #160	; 0xa0
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b02      	cmp	r3, #2
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2ba0      	cmp	r3, #160	; 0xa0
 8002346:	d005      	beq.n	8002354 <HAL_I2C_IsDeviceReady+0x188>
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_I2C_IsDeviceReady+0x188>
 800234e:	7dbb      	ldrb	r3, [r7, #22]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0cd      	beq.n	80022f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d129      	bne.n	80023be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2319      	movs	r3, #25
 8002396:	2201      	movs	r2, #1
 8002398:	4921      	ldr	r1, [pc, #132]	; (8002420 <HAL_I2C_IsDeviceReady+0x254>)
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f8c6 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e036      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e02c      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2319      	movs	r3, #25
 80023de:	2201      	movs	r2, #1
 80023e0:	490f      	ldr	r1, [pc, #60]	; (8002420 <HAL_I2C_IsDeviceReady+0x254>)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f8a2 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e012      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f4ff af32 	bcc.w	8002266 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	00100002 	.word	0x00100002
 8002424:	ffff0000 	.word	0xffff0000

08002428 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	460b      	mov	r3, r1
 8002436:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d006      	beq.n	8002452 <I2C_MasterRequestWrite+0x2a>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d003      	beq.n	8002452 <I2C_MasterRequestWrite+0x2a>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002450:	d108      	bne.n	8002464 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e00b      	b.n	800247c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	2b12      	cmp	r3, #18
 800246a:	d107      	bne.n	800247c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f84f 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a2:	d103      	bne.n	80024ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e035      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024b8:	d108      	bne.n	80024cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024c8:	611a      	str	r2, [r3, #16]
 80024ca:	e01b      	b.n	8002504 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024cc:	897b      	ldrh	r3, [r7, #10]
 80024ce:	11db      	asrs	r3, r3, #7
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 0306 	and.w	r3, r3, #6
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f063 030f 	orn	r3, r3, #15
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	490e      	ldr	r1, [pc, #56]	; (8002524 <I2C_MasterRequestWrite+0xfc>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f875 	bl	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e010      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <I2C_MasterRequestWrite+0x100>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f865 	bl	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00010008 	.word	0x00010008
 8002528:	00010002 	.word	0x00010002

0800252c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253c:	e025      	b.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d021      	beq.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7ff f90f 	bl	8001768 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d116      	bne.n	800258a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e023      	b.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10d      	bne.n	80025b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	e00c      	b.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d0b6      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e8:	e051      	b.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f8:	d123      	bne.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002608:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002612:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0204 	orr.w	r2, r3, #4
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e046      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d021      	beq.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff f88d 	bl	8001768 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e020      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10c      	bne.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e00b      	b.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4013      	ands	r3, r2
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d18d      	bne.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e4:	e02d      	b.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f878 	bl	80027dc <I2C_IsAcknowledgeFailed>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e02d      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d021      	beq.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fe:	f7ff f833 	bl	8001768 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d1ca      	bne.n	80026e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002766:	e02d      	b.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f837 	bl	80027dc <I2C_IsAcknowledgeFailed>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e02d      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d021      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7fe fff2 	bl	8001768 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d1ca      	bne.n	8002768 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d11b      	bne.n	800282c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_PWREx_EnableOverDrive+0x90>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002868:	f7fe ff7e 	bl	8001768 <HAL_GetTick>
 800286c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800286e:	e009      	b.n	8002884 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002870:	f7fe ff7a 	bl	8001768 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800287e:	d901      	bls.n	8002884 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e01f      	b.n	80028c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002890:	d1ee      	bne.n	8002870 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002898:	f7fe ff66 	bl	8001768 <HAL_GetTick>
 800289c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800289e:	e009      	b.n	80028b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028a0:	f7fe ff62 	bl	8001768 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ae:	d901      	bls.n	80028b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e007      	b.n	80028c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028c0:	d1ee      	bne.n	80028a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	420e0040 	.word	0x420e0040
 80028d4:	40007000 	.word	0x40007000
 80028d8:	420e0044 	.word	0x420e0044

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cc      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d90c      	bls.n	8002918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d044      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d119      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4934      	ldr	r1, [pc, #208]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fecc 	bl	8001768 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fec8 	bl	8001768 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e04f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d20c      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f855 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fe2c 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080059e4 	.word	0x080059e4
 8002aa0:	20000008 	.word	0x20000008
 8002aa4:	2000000c 	.word	0x2000000c

08002aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000008 	.word	0x20000008

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac4:	f7ff fff0 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	080059f4 	.word	0x080059f4

08002ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aec:	f7ff ffdc 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0b5b      	lsrs	r3, r3, #13
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	080059f4 	.word	0x080059f4

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b0ae      	sub	sp, #184	; 0xb8
 8002b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b36:	4bcb      	ldr	r3, [pc, #812]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	f200 8206 	bhi.w	8002f50 <HAL_RCC_GetSysClockFreq+0x440>
 8002b44:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b81 	.word	0x08002b81
 8002b50:	08002f51 	.word	0x08002f51
 8002b54:	08002f51 	.word	0x08002f51
 8002b58:	08002f51 	.word	0x08002f51
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002f51 	.word	0x08002f51
 8002b64:	08002f51 	.word	0x08002f51
 8002b68:	08002f51 	.word	0x08002f51
 8002b6c:	08002b91 	.word	0x08002b91
 8002b70:	08002f51 	.word	0x08002f51
 8002b74:	08002f51 	.word	0x08002f51
 8002b78:	08002f51 	.word	0x08002f51
 8002b7c:	08002d81 	.word	0x08002d81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4bb9      	ldr	r3, [pc, #740]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b86:	e1e7      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b88:	4bb8      	ldr	r3, [pc, #736]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b8e:	e1e3      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4bb4      	ldr	r3, [pc, #720]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9c:	4bb1      	ldr	r3, [pc, #708]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d071      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba8:	4bae      	ldr	r3, [pc, #696]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bb4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bce:	4622      	mov	r2, r4
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	0159      	lsls	r1, r3, #5
 8002bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be0:	0150      	lsls	r0, r2, #5
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4621      	mov	r1, r4
 8002be8:	1a51      	subs	r1, r2, r1
 8002bea:	6439      	str	r1, [r7, #64]	; 0x40
 8002bec:	4629      	mov	r1, r5
 8002bee:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002c00:	4649      	mov	r1, r9
 8002c02:	018b      	lsls	r3, r1, #6
 8002c04:	4641      	mov	r1, r8
 8002c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	018a      	lsls	r2, r1, #6
 8002c0e:	4641      	mov	r1, r8
 8002c10:	1a51      	subs	r1, r2, r1
 8002c12:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c14:	4649      	mov	r1, r9
 8002c16:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c28:	4649      	mov	r1, r9
 8002c2a:	00cb      	lsls	r3, r1, #3
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c32:	4641      	mov	r1, r8
 8002c34:	00ca      	lsls	r2, r1, #3
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
 8002c42:	462b      	mov	r3, r5
 8002c44:	460a      	mov	r2, r1
 8002c46:	eb42 0303 	adc.w	r3, r2, r3
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c58:	4629      	mov	r1, r5
 8002c5a:	024b      	lsls	r3, r1, #9
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c62:	4621      	mov	r1, r4
 8002c64:	024a      	lsls	r2, r1, #9
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c7c:	f7fd faca 	bl	8000214 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c8a:	e067      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8c:	4b75      	ldr	r3, [pc, #468]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002caa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	0159      	lsls	r1, r3, #5
 8002cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc0:	0150      	lsls	r0, r2, #5
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	1a51      	subs	r1, r2, r1
 8002cca:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ccc:	4629      	mov	r1, r5
 8002cce:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	018b      	lsls	r3, r1, #6
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cea:	4641      	mov	r1, r8
 8002cec:	018a      	lsls	r2, r1, #6
 8002cee:	4641      	mov	r1, r8
 8002cf0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d0e:	4692      	mov	sl, r2
 8002d10:	469b      	mov	fp, r3
 8002d12:	4623      	mov	r3, r4
 8002d14:	eb1a 0303 	adds.w	r3, sl, r3
 8002d18:	623b      	str	r3, [r7, #32]
 8002d1a:	462b      	mov	r3, r5
 8002d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d2e:	4629      	mov	r1, r5
 8002d30:	028b      	lsls	r3, r1, #10
 8002d32:	4621      	mov	r1, r4
 8002d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d38:	4621      	mov	r1, r4
 8002d3a:	028a      	lsls	r2, r1, #10
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d44:	2200      	movs	r2, #0
 8002d46:	673b      	str	r3, [r7, #112]	; 0x70
 8002d48:	677a      	str	r2, [r7, #116]	; 0x74
 8002d4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d4e:	f7fd fa61 	bl	8000214 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4613      	mov	r3, r2
 8002d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d5c:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	3301      	adds	r3, #1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d7e:	e0eb      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8c:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d06b      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	2200      	movs	r2, #0
 8002da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002da2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002daa:	663b      	str	r3, [r7, #96]	; 0x60
 8002dac:	2300      	movs	r3, #0
 8002dae:	667b      	str	r3, [r7, #100]	; 0x64
 8002db0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002db4:	4622      	mov	r2, r4
 8002db6:	462b      	mov	r3, r5
 8002db8:	f04f 0000 	mov.w	r0, #0
 8002dbc:	f04f 0100 	mov.w	r1, #0
 8002dc0:	0159      	lsls	r1, r3, #5
 8002dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc6:	0150      	lsls	r0, r2, #5
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4621      	mov	r1, r4
 8002dce:	1a51      	subs	r1, r2, r1
 8002dd0:	61b9      	str	r1, [r7, #24]
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002de6:	4659      	mov	r1, fp
 8002de8:	018b      	lsls	r3, r1, #6
 8002dea:	4651      	mov	r1, sl
 8002dec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df0:	4651      	mov	r1, sl
 8002df2:	018a      	lsls	r2, r1, #6
 8002df4:	4651      	mov	r1, sl
 8002df6:	ebb2 0801 	subs.w	r8, r2, r1
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	eb63 0901 	sbc.w	r9, r3, r1
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e14:	4690      	mov	r8, r2
 8002e16:	4699      	mov	r9, r3
 8002e18:	4623      	mov	r3, r4
 8002e1a:	eb18 0303 	adds.w	r3, r8, r3
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	462b      	mov	r3, r5
 8002e22:	eb49 0303 	adc.w	r3, r9, r3
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e34:	4629      	mov	r1, r5
 8002e36:	024b      	lsls	r3, r1, #9
 8002e38:	4621      	mov	r1, r4
 8002e3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e3e:	4621      	mov	r1, r4
 8002e40:	024a      	lsls	r2, r1, #9
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e54:	f7fd f9de 	bl	8000214 <__aeabi_uldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e62:	e065      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x420>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e70:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	2200      	movs	r2, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e80:	653b      	str	r3, [r7, #80]	; 0x50
 8002e82:	2300      	movs	r3, #0
 8002e84:	657b      	str	r3, [r7, #84]	; 0x54
 8002e86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e8a:	4642      	mov	r2, r8
 8002e8c:	464b      	mov	r3, r9
 8002e8e:	f04f 0000 	mov.w	r0, #0
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	0159      	lsls	r1, r3, #5
 8002e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e9c:	0150      	lsls	r0, r2, #5
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	1a51      	subs	r1, r2, r1
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ebc:	4659      	mov	r1, fp
 8002ebe:	018b      	lsls	r3, r1, #6
 8002ec0:	4651      	mov	r1, sl
 8002ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	018a      	lsls	r2, r1, #6
 8002eca:	4651      	mov	r1, sl
 8002ecc:	1a54      	subs	r4, r2, r1
 8002ece:	4659      	mov	r1, fp
 8002ed0:	eb63 0501 	sbc.w	r5, r3, r1
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	00eb      	lsls	r3, r5, #3
 8002ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ee2:	00e2      	lsls	r2, r4, #3
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	4643      	mov	r3, r8
 8002eea:	18e3      	adds	r3, r4, r3
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	464b      	mov	r3, r9
 8002ef0:	eb45 0303 	adc.w	r3, r5, r3
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f02:	4629      	mov	r1, r5
 8002f04:	028b      	lsls	r3, r1, #10
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	028a      	lsls	r2, r1, #10
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f18:	2200      	movs	r2, #0
 8002f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f1c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f22:	f7fd f977 	bl	8000214 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	0f1b      	lsrs	r3, r3, #28
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f4e:	e003      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	37b8      	adds	r7, #184	; 0xb8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400

08002f70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e28d      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8083 	beq.w	8003096 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f90:	4b94      	ldr	r3, [pc, #592]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d019      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f9c:	4b91      	ldr	r3, [pc, #580]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fa8:	4b8e      	ldr	r3, [pc, #568]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b84      	ldr	r3, [pc, #528]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x124>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e25a      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x90>
 8002ff2:	4b7c      	ldr	r3, [pc, #496]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7b      	ldr	r2, [pc, #492]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xcc>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0xb4>
 800300a:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a75      	ldr	r2, [pc, #468]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a72      	ldr	r2, [pc, #456]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xcc>
 8003024:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6e      	ldr	r2, [pc, #440]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a6b      	ldr	r2, [pc, #428]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fb90 	bl	8001768 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fb8c 	bl	8001768 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e21f      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xdc>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fb7c 	bl	8001768 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe fb78 	bl	8001768 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e20b      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x104>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d06f      	beq.n	8003182 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030a2:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d017      	beq.n	80030de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ae:	4b4d      	ldr	r3, [pc, #308]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d105      	bne.n	80030c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ba:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b44      	ldr	r3, [pc, #272]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_RCC_OscConfig+0x186>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1d3      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4937      	ldr	r1, [pc, #220]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCC_OscConfig+0x278>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe fb25 	bl	8001768 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe fb21 	bl	8001768 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1b4      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4925      	ldr	r1, [pc, #148]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCC_OscConfig+0x278>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fb04 	bl	8001768 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe fb00 	bl	8001768 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e193      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d036      	beq.n	80031fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCC_OscConfig+0x27c>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe fae4 	bl	8001768 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe fae0 	bl	8001768 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e173      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x234>
 80031c2:	e01b      	b.n	80031fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_RCC_OscConfig+0x27c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fe facd 	bl	8001768 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	e00e      	b.n	80031f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fe fac9 	bl	8001768 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d907      	bls.n	80031f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e15c      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
 80031e4:	40023800 	.word	0x40023800
 80031e8:	42470000 	.word	0x42470000
 80031ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f0:	4b8a      	ldr	r3, [pc, #552]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ea      	bne.n	80031d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8097 	beq.w	8003338 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b83      	ldr	r3, [pc, #524]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10f      	bne.n	800323a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b7f      	ldr	r3, [pc, #508]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	4a7e      	ldr	r2, [pc, #504]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003228:	6413      	str	r3, [r2, #64]	; 0x40
 800322a:	4b7c      	ldr	r3, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003236:	2301      	movs	r3, #1
 8003238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	4b79      	ldr	r3, [pc, #484]	; (8003420 <HAL_RCC_OscConfig+0x4b0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d118      	bne.n	8003278 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003246:	4b76      	ldr	r3, [pc, #472]	; (8003420 <HAL_RCC_OscConfig+0x4b0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a75      	ldr	r2, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x4b0>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003252:	f7fe fa89 	bl	8001768 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325a:	f7fe fa85 	bl	8001768 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e118      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326c:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <HAL_RCC_OscConfig+0x4b0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d106      	bne.n	800328e <HAL_RCC_OscConfig+0x31e>
 8003280:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a65      	ldr	r2, [pc, #404]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	e01c      	b.n	80032c8 <HAL_RCC_OscConfig+0x358>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x340>
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a60      	ldr	r2, [pc, #384]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	4b5e      	ldr	r3, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a5d      	ldr	r2, [pc, #372]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0x358>
 80032b0:	4b5a      	ldr	r3, [pc, #360]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a59      	ldr	r2, [pc, #356]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
 80032bc:	4b57      	ldr	r3, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	4a56      	ldr	r2, [pc, #344]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032c2:	f023 0304 	bic.w	r3, r3, #4
 80032c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d015      	beq.n	80032fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe fa4a 	bl	8001768 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fe fa46 	bl	8001768 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0d7      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0ee      	beq.n	80032d8 <HAL_RCC_OscConfig+0x368>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fa34 	bl	8001768 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	e00a      	b.n	800331a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fe fa30 	bl	8001768 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0c1      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331a:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ee      	bne.n	8003304 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	4a3a      	ldr	r2, [pc, #232]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80ad 	beq.w	800349c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b08      	cmp	r3, #8
 800334c:	d060      	beq.n	8003410 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d145      	bne.n	80033e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_RCC_OscConfig+0x4b4>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe fa04 	bl	8001768 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fa00 	bl	8001768 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e093      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x4b4>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe f9d5 	bl	8001768 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe f9d1 	bl	8001768 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e064      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x452>
 80033e0:	e05c      	b.n	800349c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x4b4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe f9be 	bl	8001768 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe f9ba 	bl	8001768 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04d      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x480>
 800340e:	e045      	b.n	800349c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e040      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
 8003424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_RCC_OscConfig+0x538>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d030      	beq.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d129      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d122      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d119      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d10f      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e041      	b.n	8003542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd ffac 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f000 fa98 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d001      	beq.n	8003564 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e046      	b.n	80035f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_TIM_Base_Start+0xb4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d022      	beq.n	80035bc <HAL_TIM_Base_Start+0x70>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357e:	d01d      	beq.n	80035bc <HAL_TIM_Base_Start+0x70>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <HAL_TIM_Base_Start+0xb8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <HAL_TIM_Base_Start+0x70>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <HAL_TIM_Base_Start+0xbc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_TIM_Base_Start+0x70>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_TIM_Base_Start+0xc0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <HAL_TIM_Base_Start+0x70>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_TIM_Base_Start+0xc4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_TIM_Base_Start+0x70>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_TIM_Base_Start+0xc8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_TIM_Base_Start+0x70>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a18      	ldr	r2, [pc, #96]	; (8003618 <HAL_TIM_Base_Start+0xcc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d111      	bne.n	80035e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d010      	beq.n	80035f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	e007      	b.n	80035f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40010000 	.word	0x40010000
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40010400 	.word	0x40010400
 8003614:	40014000 	.word	0x40014000
 8003618:	40001800 	.word	0x40001800

0800361c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0202 	mvn.w	r2, #2
 8003648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9bf 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9b1 	bl	80039ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f9c2 	bl	80039f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b04      	cmp	r3, #4
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0204 	mvn.w	r2, #4
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f995 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f987 	bl	80039ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f998 	bl	80039f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0208 	mvn.w	r2, #8
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2204      	movs	r2, #4
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f96b 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f95d 	bl	80039ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f96e 	bl	80039f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b10      	cmp	r3, #16
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b10      	cmp	r3, #16
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0210 	mvn.w	r2, #16
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2208      	movs	r2, #8
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f941 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f933 	bl	80039ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f944 	bl	80039f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0201 	mvn.w	r2, #1
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f90d 	bl	80039ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 faea 	bl	8003da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f909 	bl	8003a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d10e      	bne.n	8003824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b20      	cmp	r3, #32
 8003812:	d107      	bne.n	8003824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0220 	mvn.w	r2, #32
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fab4 	bl	8003d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIM_ConfigClockSource+0x1c>
 8003844:	2302      	movs	r3, #2
 8003846:	e0b4      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x186>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003880:	d03e      	beq.n	8003900 <HAL_TIM_ConfigClockSource+0xd4>
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003886:	f200 8087 	bhi.w	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	f000 8086 	beq.w	800399e <HAL_TIM_ConfigClockSource+0x172>
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003896:	d87f      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b70      	cmp	r3, #112	; 0x70
 800389a:	d01a      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xa6>
 800389c:	2b70      	cmp	r3, #112	; 0x70
 800389e:	d87b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b60      	cmp	r3, #96	; 0x60
 80038a2:	d050      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0x11a>
 80038a4:	2b60      	cmp	r3, #96	; 0x60
 80038a6:	d877      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b50      	cmp	r3, #80	; 0x50
 80038aa:	d03c      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0xfa>
 80038ac:	2b50      	cmp	r3, #80	; 0x50
 80038ae:	d873      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d058      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x13a>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d86f      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b30      	cmp	r3, #48	; 0x30
 80038ba:	d064      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038bc:	2b30      	cmp	r3, #48	; 0x30
 80038be:	d86b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d060      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d867      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d05c      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d05a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038d0:	e062      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f000 f9b7 	bl	8003c54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	609a      	str	r2, [r3, #8]
      break;
 80038fe:	e04f      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6899      	ldr	r1, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f000 f9a0 	bl	8003c54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003922:	609a      	str	r2, [r3, #8]
      break;
 8003924:	e03c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	461a      	mov	r2, r3
 8003934:	f000 f914 	bl	8003b60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2150      	movs	r1, #80	; 0x50
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f96d 	bl	8003c1e <TIM_ITRx_SetConfig>
      break;
 8003944:	e02c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	461a      	mov	r2, r3
 8003954:	f000 f933 	bl	8003bbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2160      	movs	r1, #96	; 0x60
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f95d 	bl	8003c1e <TIM_ITRx_SetConfig>
      break;
 8003964:	e01c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	461a      	mov	r2, r3
 8003974:	f000 f8f4 	bl	8003b60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2140      	movs	r1, #64	; 0x40
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f94d 	bl	8003c1e <TIM_ITRx_SetConfig>
      break;
 8003984:	e00c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f000 f944 	bl	8003c1e <TIM_ITRx_SetConfig>
      break;
 8003996:	e003      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e000      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800399e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a40      	ldr	r2, [pc, #256]	; (8003b34 <TIM_Base_SetConfig+0x114>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d00f      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3d      	ldr	r2, [pc, #244]	; (8003b38 <TIM_Base_SetConfig+0x118>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3c      	ldr	r2, [pc, #240]	; (8003b3c <TIM_Base_SetConfig+0x11c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <TIM_Base_SetConfig+0x120>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3a      	ldr	r2, [pc, #232]	; (8003b44 <TIM_Base_SetConfig+0x124>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2f      	ldr	r2, [pc, #188]	; (8003b34 <TIM_Base_SetConfig+0x114>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a80:	d027      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <TIM_Base_SetConfig+0x118>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d023      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <TIM_Base_SetConfig+0x11c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01f      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2a      	ldr	r2, [pc, #168]	; (8003b40 <TIM_Base_SetConfig+0x120>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <TIM_Base_SetConfig+0x124>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d017      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a28      	ldr	r2, [pc, #160]	; (8003b48 <TIM_Base_SetConfig+0x128>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <TIM_Base_SetConfig+0x12c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <TIM_Base_SetConfig+0x130>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <TIM_Base_SetConfig+0x134>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <TIM_Base_SetConfig+0x138>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <TIM_Base_SetConfig+0x13c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <TIM_Base_SetConfig+0x114>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0xf8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <TIM_Base_SetConfig+0x124>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d103      	bne.n	8003b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	615a      	str	r2, [r3, #20]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	40000c00 	.word	0x40000c00
 8003b44:	40010400 	.word	0x40010400
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800
 8003b54:	40001800 	.word	0x40001800
 8003b58:	40001c00 	.word	0x40001c00
 8003b5c:	40002000 	.word	0x40002000

08003b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f023 030a 	bic.w	r3, r3, #10
 8003b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f023 0210 	bic.w	r2, r3, #16
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	031b      	lsls	r3, r3, #12
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f043 0307 	orr.w	r3, r3, #7
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	021a      	lsls	r2, r3, #8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e05a      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf8:	d01d      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1b      	ldr	r2, [pc, #108]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10c      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40010400 	.word	0x40010400
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40001800 	.word	0x40001800

08003d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e03f      	b.n	8003e46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fb4e 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	; 0x24
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f829 	bl	8003e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e54:	b0c0      	sub	sp, #256	; 0x100
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	68d9      	ldr	r1, [r3, #12]
 8003e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	ea40 0301 	orr.w	r3, r0, r1
 8003e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ea8:	f021 010c 	bic.w	r1, r1, #12
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	6999      	ldr	r1, [r3, #24]
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	ea40 0301 	orr.w	r3, r0, r1
 8003ed6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b8f      	ldr	r3, [pc, #572]	; (800411c <UART_SetConfig+0x2cc>)
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d005      	beq.n	8003ef0 <UART_SetConfig+0xa0>
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b8d      	ldr	r3, [pc, #564]	; (8004120 <UART_SetConfig+0x2d0>)
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d104      	bne.n	8003efa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef0:	f7fe fdfa 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 8003ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ef8:	e003      	b.n	8003f02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003efa:	f7fe fde1 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8003efe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0c:	f040 810c 	bne.w	8004128 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f14:	2200      	movs	r2, #0
 8003f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f22:	4622      	mov	r2, r4
 8003f24:	462b      	mov	r3, r5
 8003f26:	1891      	adds	r1, r2, r2
 8003f28:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f2a:	415b      	adcs	r3, r3
 8003f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f32:	4621      	mov	r1, r4
 8003f34:	eb12 0801 	adds.w	r8, r2, r1
 8003f38:	4629      	mov	r1, r5
 8003f3a:	eb43 0901 	adc.w	r9, r3, r1
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f52:	4690      	mov	r8, r2
 8003f54:	4699      	mov	r9, r3
 8003f56:	4623      	mov	r3, r4
 8003f58:	eb18 0303 	adds.w	r3, r8, r3
 8003f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f60:	462b      	mov	r3, r5
 8003f62:	eb49 0303 	adc.w	r3, r9, r3
 8003f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f7e:	460b      	mov	r3, r1
 8003f80:	18db      	adds	r3, r3, r3
 8003f82:	653b      	str	r3, [r7, #80]	; 0x50
 8003f84:	4613      	mov	r3, r2
 8003f86:	eb42 0303 	adc.w	r3, r2, r3
 8003f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f94:	f7fc f93e 	bl	8000214 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4b61      	ldr	r3, [pc, #388]	; (8004124 <UART_SetConfig+0x2d4>)
 8003f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	011c      	lsls	r4, r3, #4
 8003fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fb8:	4642      	mov	r2, r8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	1891      	adds	r1, r2, r2
 8003fbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fc0:	415b      	adcs	r3, r3
 8003fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fc8:	4641      	mov	r1, r8
 8003fca:	eb12 0a01 	adds.w	sl, r2, r1
 8003fce:	4649      	mov	r1, r9
 8003fd0:	eb43 0b01 	adc.w	fp, r3, r1
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fe0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe8:	4692      	mov	sl, r2
 8003fea:	469b      	mov	fp, r3
 8003fec:	4643      	mov	r3, r8
 8003fee:	eb1a 0303 	adds.w	r3, sl, r3
 8003ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800400c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004010:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004014:	460b      	mov	r3, r1
 8004016:	18db      	adds	r3, r3, r3
 8004018:	643b      	str	r3, [r7, #64]	; 0x40
 800401a:	4613      	mov	r3, r2
 800401c:	eb42 0303 	adc.w	r3, r2, r3
 8004020:	647b      	str	r3, [r7, #68]	; 0x44
 8004022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004026:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800402a:	f7fc f8f3 	bl	8000214 <__aeabi_uldivmod>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4611      	mov	r1, r2
 8004034:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <UART_SetConfig+0x2d4>)
 8004036:	fba3 2301 	umull	r2, r3, r3, r1
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2264      	movs	r2, #100	; 0x64
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	1acb      	subs	r3, r1, r3
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800404a:	4b36      	ldr	r3, [pc, #216]	; (8004124 <UART_SetConfig+0x2d4>)
 800404c:	fba3 2302 	umull	r2, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004058:	441c      	add	r4, r3
 800405a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004064:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004068:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	1891      	adds	r1, r2, r2
 8004072:	63b9      	str	r1, [r7, #56]	; 0x38
 8004074:	415b      	adcs	r3, r3
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800407c:	4641      	mov	r1, r8
 800407e:	1851      	adds	r1, r2, r1
 8004080:	6339      	str	r1, [r7, #48]	; 0x30
 8004082:	4649      	mov	r1, r9
 8004084:	414b      	adcs	r3, r1
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004094:	4659      	mov	r1, fp
 8004096:	00cb      	lsls	r3, r1, #3
 8004098:	4651      	mov	r1, sl
 800409a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409e:	4651      	mov	r1, sl
 80040a0:	00ca      	lsls	r2, r1, #3
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	4642      	mov	r2, r8
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040b0:	464b      	mov	r3, r9
 80040b2:	460a      	mov	r2, r1
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040d0:	460b      	mov	r3, r1
 80040d2:	18db      	adds	r3, r3, r3
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d6:	4613      	mov	r3, r2
 80040d8:	eb42 0303 	adc.w	r3, r2, r3
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040e6:	f7fc f895 	bl	8000214 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <UART_SetConfig+0x2d4>)
 80040f0:	fba3 1302 	umull	r1, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2164      	movs	r1, #100	; 0x64
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	3332      	adds	r3, #50	; 0x32
 8004102:	4a08      	ldr	r2, [pc, #32]	; (8004124 <UART_SetConfig+0x2d4>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	f003 0207 	and.w	r2, r3, #7
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4422      	add	r2, r4
 8004116:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004118:	e105      	b.n	8004326 <UART_SetConfig+0x4d6>
 800411a:	bf00      	nop
 800411c:	40011000 	.word	0x40011000
 8004120:	40011400 	.word	0x40011400
 8004124:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004132:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004136:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800413a:	4642      	mov	r2, r8
 800413c:	464b      	mov	r3, r9
 800413e:	1891      	adds	r1, r2, r2
 8004140:	6239      	str	r1, [r7, #32]
 8004142:	415b      	adcs	r3, r3
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
 8004146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800414a:	4641      	mov	r1, r8
 800414c:	1854      	adds	r4, r2, r1
 800414e:	4649      	mov	r1, r9
 8004150:	eb43 0501 	adc.w	r5, r3, r1
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	00eb      	lsls	r3, r5, #3
 800415e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004162:	00e2      	lsls	r2, r4, #3
 8004164:	4614      	mov	r4, r2
 8004166:	461d      	mov	r5, r3
 8004168:	4643      	mov	r3, r8
 800416a:	18e3      	adds	r3, r4, r3
 800416c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004170:	464b      	mov	r3, r9
 8004172:	eb45 0303 	adc.w	r3, r5, r3
 8004176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004196:	4629      	mov	r1, r5
 8004198:	008b      	lsls	r3, r1, #2
 800419a:	4621      	mov	r1, r4
 800419c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a0:	4621      	mov	r1, r4
 80041a2:	008a      	lsls	r2, r1, #2
 80041a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041a8:	f7fc f834 	bl	8000214 <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4b60      	ldr	r3, [pc, #384]	; (8004334 <UART_SetConfig+0x4e4>)
 80041b2:	fba3 2302 	umull	r2, r3, r3, r2
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	011c      	lsls	r4, r3, #4
 80041ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041cc:	4642      	mov	r2, r8
 80041ce:	464b      	mov	r3, r9
 80041d0:	1891      	adds	r1, r2, r2
 80041d2:	61b9      	str	r1, [r7, #24]
 80041d4:	415b      	adcs	r3, r3
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041dc:	4641      	mov	r1, r8
 80041de:	1851      	adds	r1, r2, r1
 80041e0:	6139      	str	r1, [r7, #16]
 80041e2:	4649      	mov	r1, r9
 80041e4:	414b      	adcs	r3, r1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f4:	4659      	mov	r1, fp
 80041f6:	00cb      	lsls	r3, r1, #3
 80041f8:	4651      	mov	r1, sl
 80041fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fe:	4651      	mov	r1, sl
 8004200:	00ca      	lsls	r2, r1, #3
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	4603      	mov	r3, r0
 8004208:	4642      	mov	r2, r8
 800420a:	189b      	adds	r3, r3, r2
 800420c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004210:	464b      	mov	r3, r9
 8004212:	460a      	mov	r2, r1
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	67bb      	str	r3, [r7, #120]	; 0x78
 8004226:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004234:	4649      	mov	r1, r9
 8004236:	008b      	lsls	r3, r1, #2
 8004238:	4641      	mov	r1, r8
 800423a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800423e:	4641      	mov	r1, r8
 8004240:	008a      	lsls	r2, r1, #2
 8004242:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004246:	f7fb ffe5 	bl	8000214 <__aeabi_uldivmod>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4b39      	ldr	r3, [pc, #228]	; (8004334 <UART_SetConfig+0x4e4>)
 8004250:	fba3 1302 	umull	r1, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	2164      	movs	r1, #100	; 0x64
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	3332      	adds	r3, #50	; 0x32
 8004262:	4a34      	ldr	r2, [pc, #208]	; (8004334 <UART_SetConfig+0x4e4>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800426e:	441c      	add	r4, r3
 8004270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004274:	2200      	movs	r2, #0
 8004276:	673b      	str	r3, [r7, #112]	; 0x70
 8004278:	677a      	str	r2, [r7, #116]	; 0x74
 800427a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	1891      	adds	r1, r2, r2
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	415b      	adcs	r3, r3
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800428e:	4641      	mov	r1, r8
 8004290:	1851      	adds	r1, r2, r1
 8004292:	6039      	str	r1, [r7, #0]
 8004294:	4649      	mov	r1, r9
 8004296:	414b      	adcs	r3, r1
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042a6:	4659      	mov	r1, fp
 80042a8:	00cb      	lsls	r3, r1, #3
 80042aa:	4651      	mov	r1, sl
 80042ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b0:	4651      	mov	r1, sl
 80042b2:	00ca      	lsls	r2, r1, #3
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	4603      	mov	r3, r0
 80042ba:	4642      	mov	r2, r8
 80042bc:	189b      	adds	r3, r3, r2
 80042be:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c0:	464b      	mov	r3, r9
 80042c2:	460a      	mov	r2, r1
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	663b      	str	r3, [r7, #96]	; 0x60
 80042d4:	667a      	str	r2, [r7, #100]	; 0x64
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042e2:	4649      	mov	r1, r9
 80042e4:	008b      	lsls	r3, r1, #2
 80042e6:	4641      	mov	r1, r8
 80042e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ec:	4641      	mov	r1, r8
 80042ee:	008a      	lsls	r2, r1, #2
 80042f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042f4:	f7fb ff8e 	bl	8000214 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <UART_SetConfig+0x4e4>)
 80042fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2164      	movs	r1, #100	; 0x64
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	3332      	adds	r3, #50	; 0x32
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <UART_SetConfig+0x4e4>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4422      	add	r2, r4
 8004324:	609a      	str	r2, [r3, #8]
}
 8004326:	bf00      	nop
 8004328:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800432c:	46bd      	mov	sp, r7
 800432e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004332:	bf00      	nop
 8004334:	51eb851f 	.word	0x51eb851f

08004338 <_ZNSaIcEC1Ev>:
 8004338:	4770      	bx	lr

0800433a <_ZNSaIcED1Ev>:
 800433a:	4770      	bx	lr

0800433c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800433c:	b10a      	cbz	r2, 8004342 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800433e:	f000 babb 	b.w	80048b8 <memcpy>
 8004342:	4770      	bx	lr

08004344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8004344:	b508      	push	{r3, lr}
 8004346:	680b      	ldr	r3, [r1, #0]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d302      	bcc.n	8004354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800434e:	480d      	ldr	r0, [pc, #52]	; (8004384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8004350:	f000 f9b5 	bl	80046be <_ZSt20__throw_length_errorPKc>
 8004354:	4293      	cmp	r3, r2
 8004356:	d90b      	bls.n	8004370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004358:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800435c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8004360:	d206      	bcs.n	8004370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004362:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004366:	bf2a      	itet	cs
 8004368:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800436c:	6008      	strcc	r0, [r1, #0]
 800436e:	600b      	strcs	r3, [r1, #0]
 8004370:	6808      	ldr	r0, [r1, #0]
 8004372:	3001      	adds	r0, #1
 8004374:	d501      	bpl.n	800437a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8004376:	f000 f99c 	bl	80046b2 <_ZSt17__throw_bad_allocv>
 800437a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800437e:	f000 b987 	b.w	8004690 <_Znwj>
 8004382:	bf00      	nop
 8004384:	080059fc 	.word	0x080059fc

08004388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004388:	f850 3b08 	ldr.w	r3, [r0], #8
 800438c:	4283      	cmp	r3, r0
 800438e:	d002      	beq.n	8004396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8004390:	4618      	mov	r0, r3
 8004392:	f000 b97b 	b.w	800468c <_ZdlPv>
 8004396:	4770      	bx	lr

08004398 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8004398:	b508      	push	{r3, lr}
 800439a:	4603      	mov	r3, r0
 800439c:	4608      	mov	r0, r1
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4298      	cmp	r0, r3
 80043a2:	4611      	mov	r1, r2
 80043a4:	d903      	bls.n	80043ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4801      	ldr	r0, [pc, #4]	; (80043b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80043aa:	f000 f98b 	bl	80046c4 <_ZSt24__throw_out_of_range_fmtPKcz>
 80043ae:	bd08      	pop	{r3, pc}
 80043b0:	08005a14 	.word	0x08005a14

080043b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80043b4:	6840      	ldr	r0, [r0, #4]
 80043b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80043ba:	3901      	subs	r1, #1
 80043bc:	1a09      	subs	r1, r1, r0
 80043be:	4291      	cmp	r1, r2
 80043c0:	b508      	push	{r3, lr}
 80043c2:	d202      	bcs.n	80043ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f97a 	bl	80046be <_ZSt20__throw_length_errorPKc>
 80043ca:	bd08      	pop	{r3, pc}

080043cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80043cc:	6803      	ldr	r3, [r0, #0]
 80043ce:	428b      	cmp	r3, r1
 80043d0:	d806      	bhi.n	80043e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80043d2:	6840      	ldr	r0, [r0, #4]
 80043d4:	4418      	add	r0, r3
 80043d6:	4281      	cmp	r1, r0
 80043d8:	bf94      	ite	ls
 80043da:	2000      	movls	r0, #0
 80043dc:	2001      	movhi	r0, #1
 80043de:	4770      	bx	lr
 80043e0:	2001      	movs	r0, #1
 80043e2:	4770      	bx	lr

080043e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80043e4:	2a01      	cmp	r2, #1
 80043e6:	b410      	push	{r4}
 80043e8:	d104      	bne.n	80043f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80043ea:	780a      	ldrb	r2, [r1, #0]
 80043ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f0:	7002      	strb	r2, [r0, #0]
 80043f2:	4770      	bx	lr
 80043f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f8:	f7ff bfa0 	b.w	800433c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080043fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80043fc:	2a01      	cmp	r2, #1
 80043fe:	b430      	push	{r4, r5}
 8004400:	d103      	bne.n	800440a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8004402:	780b      	ldrb	r3, [r1, #0]
 8004404:	7003      	strb	r3, [r0, #0]
 8004406:	bc30      	pop	{r4, r5}
 8004408:	4770      	bx	lr
 800440a:	2a00      	cmp	r2, #0
 800440c:	d0fb      	beq.n	8004406 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800440e:	bc30      	pop	{r4, r5}
 8004410:	f000 ba60 	b.w	80048d4 <memmove>

08004414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8004414:	460b      	mov	r3, r1
 8004416:	2b01      	cmp	r3, #1
 8004418:	b410      	push	{r4}
 800441a:	4611      	mov	r1, r2
 800441c:	4604      	mov	r4, r0
 800441e:	d103      	bne.n	8004428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8004420:	7022      	strb	r2, [r4, #0]
 8004422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0fa      	beq.n	8004422 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800442c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004430:	461a      	mov	r2, r3
 8004432:	f000 ba69 	b.w	8004908 <memset>

08004436 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8004436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004438:	290f      	cmp	r1, #15
 800443a:	4604      	mov	r4, r0
 800443c:	9101      	str	r1, [sp, #4]
 800443e:	4615      	mov	r5, r2
 8004440:	d906      	bls.n	8004450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8004442:	2200      	movs	r2, #0
 8004444:	a901      	add	r1, sp, #4
 8004446:	f7ff ff7d 	bl	8004344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800444a:	9b01      	ldr	r3, [sp, #4]
 800444c:	6020      	str	r0, [r4, #0]
 800444e:	60a3      	str	r3, [r4, #8]
 8004450:	9901      	ldr	r1, [sp, #4]
 8004452:	b119      	cbz	r1, 800445c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	462a      	mov	r2, r5
 8004458:	f7ff ffdc 	bl	8004414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800445c:	9b01      	ldr	r3, [sp, #4]
 800445e:	6822      	ldr	r2, [r4, #0]
 8004460:	6063      	str	r3, [r4, #4]
 8004462:	2100      	movs	r1, #0
 8004464:	54d1      	strb	r1, [r2, r3]
 8004466:	b003      	add	sp, #12
 8004468:	bd30      	pop	{r4, r5, pc}

0800446a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800446a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800446e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004470:	461f      	mov	r7, r3
 8004472:	6843      	ldr	r3, [r0, #4]
 8004474:	eb01 0802 	add.w	r8, r1, r2
 8004478:	1ab2      	subs	r2, r6, r2
 800447a:	441a      	add	r2, r3
 800447c:	eba3 0908 	sub.w	r9, r3, r8
 8004480:	4603      	mov	r3, r0
 8004482:	9201      	str	r2, [sp, #4]
 8004484:	f853 2b08 	ldr.w	r2, [r3], #8
 8004488:	429a      	cmp	r2, r3
 800448a:	bf18      	it	ne
 800448c:	6882      	ldrne	r2, [r0, #8]
 800448e:	460d      	mov	r5, r1
 8004490:	bf08      	it	eq
 8004492:	220f      	moveq	r2, #15
 8004494:	a901      	add	r1, sp, #4
 8004496:	4604      	mov	r4, r0
 8004498:	f7ff ff54 	bl	8004344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800449c:	4682      	mov	sl, r0
 800449e:	b11d      	cbz	r5, 80044a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80044a0:	6821      	ldr	r1, [r4, #0]
 80044a2:	462a      	mov	r2, r5
 80044a4:	f7ff ff9e 	bl	80043e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80044a8:	b137      	cbz	r7, 80044b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80044aa:	b12e      	cbz	r6, 80044b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80044ac:	4632      	mov	r2, r6
 80044ae:	4639      	mov	r1, r7
 80044b0:	eb0a 0005 	add.w	r0, sl, r5
 80044b4:	f7ff ff96 	bl	80043e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80044b8:	f1b9 0f00 	cmp.w	r9, #0
 80044bc:	d007      	beq.n	80044ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80044be:	6821      	ldr	r1, [r4, #0]
 80044c0:	4435      	add	r5, r6
 80044c2:	464a      	mov	r2, r9
 80044c4:	4441      	add	r1, r8
 80044c6:	eb0a 0005 	add.w	r0, sl, r5
 80044ca:	f7ff ff8b 	bl	80043e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80044ce:	4620      	mov	r0, r4
 80044d0:	f7ff ff5a 	bl	8004388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80044d4:	9b01      	ldr	r3, [sp, #4]
 80044d6:	f8c4 a000 	str.w	sl, [r4]
 80044da:	60a3      	str	r3, [r4, #8]
 80044dc:	b002      	add	sp, #8
 80044de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080044e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 80044e2:	b510      	push	{r4, lr}
 80044e4:	f100 0308 	add.w	r3, r0, #8
 80044e8:	4604      	mov	r4, r0
 80044ea:	6003      	str	r3, [r0, #0]
 80044ec:	f7ff ffa3 	bl	8004436 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 80044f0:	4620      	mov	r0, r4
 80044f2:	bd10      	pop	{r4, pc}

080044f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	4604      	mov	r4, r0
 80044f8:	460e      	mov	r6, r1
 80044fa:	3008      	adds	r0, #8
 80044fc:	6020      	str	r0, [r4, #0]
 80044fe:	f856 3b08 	ldr.w	r3, [r6], #8
 8004502:	429e      	cmp	r6, r3
 8004504:	460d      	mov	r5, r1
 8004506:	d10b      	bne.n	8004520 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8004508:	2210      	movs	r2, #16
 800450a:	4631      	mov	r1, r6
 800450c:	f7ff ff16 	bl	800433c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8004510:	686b      	ldr	r3, [r5, #4]
 8004512:	6063      	str	r3, [r4, #4]
 8004514:	2300      	movs	r3, #0
 8004516:	602e      	str	r6, [r5, #0]
 8004518:	606b      	str	r3, [r5, #4]
 800451a:	722b      	strb	r3, [r5, #8]
 800451c:	4620      	mov	r0, r4
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	688b      	ldr	r3, [r1, #8]
 8004524:	60a3      	str	r3, [r4, #8]
 8004526:	e7f3      	b.n	8004510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08004528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8004528:	b510      	push	{r4, lr}
 800452a:	4604      	mov	r4, r0
 800452c:	f7ff ff2c 	bl	8004388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004530:	4620      	mov	r0, r4
 8004532:	bd10      	pop	{r4, pc}

08004534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8004534:	6800      	ldr	r0, [r0, #0]
 8004536:	4408      	add	r0, r1
 8004538:	4770      	bx	lr
	...

0800453c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800453c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004542:	4614      	mov	r4, r2
 8004544:	4680      	mov	r8, r0
 8004546:	462a      	mov	r2, r5
 8004548:	4689      	mov	r9, r1
 800454a:	461f      	mov	r7, r3
 800454c:	4621      	mov	r1, r4
 800454e:	4b39      	ldr	r3, [pc, #228]	; (8004634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8004550:	f7ff ff30 	bl	80043b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004554:	4642      	mov	r2, r8
 8004556:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800455a:	f852 6b08 	ldr.w	r6, [r2], #8
 800455e:	4296      	cmp	r6, r2
 8004560:	bf18      	it	ne
 8004562:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8004566:	eba5 0b04 	sub.w	fp, r5, r4
 800456a:	eb03 0a0b 	add.w	sl, r3, fp
 800456e:	bf08      	it	eq
 8004570:	220f      	moveq	r2, #15
 8004572:	4552      	cmp	r2, sl
 8004574:	d351      	bcc.n	800461a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8004576:	444e      	add	r6, r9
 8004578:	4639      	mov	r1, r7
 800457a:	44a1      	add	r9, r4
 800457c:	4640      	mov	r0, r8
 800457e:	eba3 0909 	sub.w	r9, r3, r9
 8004582:	f7ff ff23 	bl	80043cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8004586:	b180      	cbz	r0, 80045aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8004588:	f1b9 0f00 	cmp.w	r9, #0
 800458c:	d006      	beq.n	800459c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800458e:	42ac      	cmp	r4, r5
 8004590:	d004      	beq.n	800459c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8004592:	464a      	mov	r2, r9
 8004594:	1931      	adds	r1, r6, r4
 8004596:	1970      	adds	r0, r6, r5
 8004598:	f7ff ff30 	bl	80043fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800459c:	b315      	cbz	r5, 80045e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800459e:	462a      	mov	r2, r5
 80045a0:	4639      	mov	r1, r7
 80045a2:	4630      	mov	r0, r6
 80045a4:	f7ff ff1e 	bl	80043e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80045a8:	e01c      	b.n	80045e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80045aa:	b135      	cbz	r5, 80045ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80045ac:	42ac      	cmp	r4, r5
 80045ae:	d33c      	bcc.n	800462a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 80045b0:	462a      	mov	r2, r5
 80045b2:	4639      	mov	r1, r7
 80045b4:	4630      	mov	r0, r6
 80045b6:	f7ff ff21 	bl	80043fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80045ba:	f1b9 0f00 	cmp.w	r9, #0
 80045be:	d011      	beq.n	80045e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80045c0:	42ac      	cmp	r4, r5
 80045c2:	d00f      	beq.n	80045e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80045c4:	464a      	mov	r2, r9
 80045c6:	1931      	adds	r1, r6, r4
 80045c8:	1970      	adds	r0, r6, r5
 80045ca:	f7ff ff17 	bl	80043fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80045ce:	42ac      	cmp	r4, r5
 80045d0:	d208      	bcs.n	80045e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80045d2:	4434      	add	r4, r6
 80045d4:	197b      	adds	r3, r7, r5
 80045d6:	429c      	cmp	r4, r3
 80045d8:	d30f      	bcc.n	80045fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80045da:	462a      	mov	r2, r5
 80045dc:	4639      	mov	r1, r7
 80045de:	4630      	mov	r0, r6
 80045e0:	f7ff ff0c 	bl	80043fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80045e4:	f8d8 3000 	ldr.w	r3, [r8]
 80045e8:	f8c8 a004 	str.w	sl, [r8, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	4640      	mov	r0, r8
 80045f0:	f803 200a 	strb.w	r2, [r3, sl]
 80045f4:	b003      	add	sp, #12
 80045f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fa:	42bc      	cmp	r4, r7
 80045fc:	d803      	bhi.n	8004606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80045fe:	462a      	mov	r2, r5
 8004600:	eb07 010b 	add.w	r1, r7, fp
 8004604:	e7cd      	b.n	80045a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8004606:	1be4      	subs	r4, r4, r7
 8004608:	4622      	mov	r2, r4
 800460a:	4639      	mov	r1, r7
 800460c:	4630      	mov	r0, r6
 800460e:	f7ff fef5 	bl	80043fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004612:	1b2a      	subs	r2, r5, r4
 8004614:	1971      	adds	r1, r6, r5
 8004616:	1930      	adds	r0, r6, r4
 8004618:	e7c4      	b.n	80045a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800461a:	9500      	str	r5, [sp, #0]
 800461c:	463b      	mov	r3, r7
 800461e:	4622      	mov	r2, r4
 8004620:	4649      	mov	r1, r9
 8004622:	4640      	mov	r0, r8
 8004624:	f7ff ff21 	bl	800446a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004628:	e7dc      	b.n	80045e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800462a:	f1b9 0f00 	cmp.w	r9, #0
 800462e:	d0d0      	beq.n	80045d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8004630:	e7c8      	b.n	80045c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8004632:	bf00      	nop
 8004634:	08005a61 	.word	0x08005a61

08004638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8004638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800463a:	4604      	mov	r4, r0
 800463c:	4615      	mov	r5, r2
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8004640:	9303      	str	r3, [sp, #12]
 8004642:	460e      	mov	r6, r1
 8004644:	f7ff fea8 	bl	8004398 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8004648:	6862      	ldr	r2, [r4, #4]
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	1b92      	subs	r2, r2, r6
 800464e:	4601      	mov	r1, r0
 8004650:	42aa      	cmp	r2, r5
 8004652:	9808      	ldr	r0, [sp, #32]
 8004654:	9000      	str	r0, [sp, #0]
 8004656:	bf28      	it	cs
 8004658:	462a      	movcs	r2, r5
 800465a:	4620      	mov	r0, r4
 800465c:	f7ff ff6e 	bl	800453c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8004660:	b004      	add	sp, #16
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	08005a4b 	.word	0x08005a4b

08004668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8004668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800466a:	4604      	mov	r4, r0
 800466c:	4610      	mov	r0, r2
 800466e:	9103      	str	r1, [sp, #12]
 8004670:	9202      	str	r2, [sp, #8]
 8004672:	f7fb fdc7 	bl	8000204 <strlen>
 8004676:	9b02      	ldr	r3, [sp, #8]
 8004678:	9000      	str	r0, [sp, #0]
 800467a:	9903      	ldr	r1, [sp, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	4620      	mov	r0, r4
 8004680:	f7ff ffda 	bl	8004638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8004684:	b004      	add	sp, #16
 8004686:	bd10      	pop	{r4, pc}

08004688 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8004688:	6800      	ldr	r0, [r0, #0]
 800468a:	4770      	bx	lr

0800468c <_ZdlPv>:
 800468c:	f000 b90c 	b.w	80048a8 <free>

08004690 <_Znwj>:
 8004690:	2801      	cmp	r0, #1
 8004692:	bf38      	it	cc
 8004694:	2001      	movcc	r0, #1
 8004696:	b510      	push	{r4, lr}
 8004698:	4604      	mov	r4, r0
 800469a:	4620      	mov	r0, r4
 800469c:	f000 f8fc 	bl	8004898 <malloc>
 80046a0:	b930      	cbnz	r0, 80046b0 <_Znwj+0x20>
 80046a2:	f000 f8bf 	bl	8004824 <_ZSt15get_new_handlerv>
 80046a6:	b908      	cbnz	r0, 80046ac <_Znwj+0x1c>
 80046a8:	f000 f8c4 	bl	8004834 <abort>
 80046ac:	4780      	blx	r0
 80046ae:	e7f4      	b.n	800469a <_Znwj+0xa>
 80046b0:	bd10      	pop	{r4, pc}

080046b2 <_ZSt17__throw_bad_allocv>:
 80046b2:	b508      	push	{r3, lr}
 80046b4:	f000 f8be 	bl	8004834 <abort>

080046b8 <_ZSt19__throw_logic_errorPKc>:
 80046b8:	b508      	push	{r3, lr}
 80046ba:	f000 f8bb 	bl	8004834 <abort>

080046be <_ZSt20__throw_length_errorPKc>:
 80046be:	b508      	push	{r3, lr}
 80046c0:	f000 f8b8 	bl	8004834 <abort>

080046c4 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80046c4:	b40f      	push	{r0, r1, r2, r3}
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	f107 0418 	add.w	r4, r7, #24
 80046d0:	f854 2b04 	ldr.w	r2, [r4], #4
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	4610      	mov	r0, r2
 80046d8:	f7fb fd94 	bl	8000204 <strlen>
 80046dc:	f200 2307 	addw	r3, r0, #519	; 0x207
 80046e0:	f023 0307 	bic.w	r3, r3, #7
 80046e4:	ebad 0d03 	sub.w	sp, sp, r3
 80046e8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	60fc      	str	r4, [r7, #12]
 80046f0:	4623      	mov	r3, r4
 80046f2:	4668      	mov	r0, sp
 80046f4:	f000 f854 	bl	80047a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80046f8:	f000 f89c 	bl	8004834 <abort>

080046fc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b09c      	sub	sp, #112	; 0x70
 8004700:	4606      	mov	r6, r0
 8004702:	af00      	add	r7, sp, #0
 8004704:	460c      	mov	r4, r1
 8004706:	1ba4      	subs	r4, r4, r6
 8004708:	490e      	ldr	r1, [pc, #56]	; (8004744 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800470a:	2269      	movs	r2, #105	; 0x69
 800470c:	1d38      	adds	r0, r7, #4
 800470e:	f000 f8d3 	bl	80048b8 <memcpy>
 8004712:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	ebad 0d03 	sub.w	sp, sp, r3
 800471e:	466d      	mov	r5, sp
 8004720:	2268      	movs	r2, #104	; 0x68
 8004722:	1d39      	adds	r1, r7, #4
 8004724:	4628      	mov	r0, r5
 8004726:	f000 f8c7 	bl	80048b8 <memcpy>
 800472a:	4622      	mov	r2, r4
 800472c:	4631      	mov	r1, r6
 800472e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8004732:	442c      	add	r4, r5
 8004734:	f000 f8c0 	bl	80048b8 <memcpy>
 8004738:	2300      	movs	r3, #0
 800473a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800473e:	4628      	mov	r0, r5
 8004740:	f7ff ffba 	bl	80046b8 <_ZSt19__throw_logic_errorPKc>
 8004744:	08005a7a 	.word	0x08005a7a

08004748 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8004748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800474c:	af00      	add	r7, sp, #0
 800474e:	b084      	sub	sp, #16
 8004750:	466d      	mov	r5, sp
 8004752:	f105 040c 	add.w	r4, r5, #12
 8004756:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800479c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800475a:	4623      	mov	r3, r4
 800475c:	f04f 0c0a 	mov.w	ip, #10
 8004760:	fbb2 f6fc 	udiv	r6, r2, ip
 8004764:	fb0c 2e16 	mls	lr, ip, r6, r2
 8004768:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800476c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8004770:	4696      	mov	lr, r2
 8004772:	f1be 0f09 	cmp.w	lr, #9
 8004776:	4632      	mov	r2, r6
 8004778:	d8f2      	bhi.n	8004760 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800477a:	1ae4      	subs	r4, r4, r3
 800477c:	428c      	cmp	r4, r1
 800477e:	d809      	bhi.n	8004794 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8004780:	f1c4 030c 	rsb	r3, r4, #12
 8004784:	4622      	mov	r2, r4
 8004786:	18e9      	adds	r1, r5, r3
 8004788:	f000 f896 	bl	80048b8 <memcpy>
 800478c:	4620      	mov	r0, r4
 800478e:	46bd      	mov	sp, r7
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	f04f 34ff 	mov.w	r4, #4294967295
 8004798:	e7f8      	b.n	800478c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800479a:	bf00      	nop
 800479c:	08005ae3 	.word	0x08005ae3

080047a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80047a0:	3901      	subs	r1, #1
 80047a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a6:	4607      	mov	r7, r0
 80047a8:	4615      	mov	r5, r2
 80047aa:	eb00 0801 	add.w	r8, r0, r1
 80047ae:	4604      	mov	r4, r0
 80047b0:	782a      	ldrb	r2, [r5, #0]
 80047b2:	b392      	cbz	r2, 800481a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80047b4:	4544      	cmp	r4, r8
 80047b6:	d22a      	bcs.n	800480e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80047b8:	2a25      	cmp	r2, #37	; 0x25
 80047ba:	d107      	bne.n	80047cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80047bc:	786a      	ldrb	r2, [r5, #1]
 80047be:	2a73      	cmp	r2, #115	; 0x73
 80047c0:	d009      	beq.n	80047d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80047c2:	2a7a      	cmp	r2, #122	; 0x7a
 80047c4:	d012      	beq.n	80047ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80047c6:	2a25      	cmp	r2, #37	; 0x25
 80047c8:	d100      	bne.n	80047cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80047ca:	3501      	adds	r5, #1
 80047cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80047d0:	f804 2b01 	strb.w	r2, [r4], #1
 80047d4:	e7ec      	b.n	80047b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80047d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80047da:	3a01      	subs	r2, #1
 80047dc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80047e0:	b1c9      	cbz	r1, 8004816 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80047e2:	4544      	cmp	r4, r8
 80047e4:	d013      	beq.n	800480e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80047e6:	f804 1b01 	strb.w	r1, [r4], #1
 80047ea:	e7f7      	b.n	80047dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80047ec:	78aa      	ldrb	r2, [r5, #2]
 80047ee:	2a75      	cmp	r2, #117	; 0x75
 80047f0:	d1ec      	bne.n	80047cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80047f2:	461e      	mov	r6, r3
 80047f4:	eba8 0104 	sub.w	r1, r8, r4
 80047f8:	f856 2b04 	ldr.w	r2, [r6], #4
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7ff ffa3 	bl	8004748 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8004802:	2800      	cmp	r0, #0
 8004804:	dd03      	ble.n	800480e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8004806:	4404      	add	r4, r0
 8004808:	3503      	adds	r5, #3
 800480a:	4633      	mov	r3, r6
 800480c:	e7d0      	b.n	80047b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800480e:	4621      	mov	r1, r4
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ff73 	bl	80046fc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8004816:	3502      	adds	r5, #2
 8004818:	e7ca      	b.n	80047b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800481a:	7022      	strb	r2, [r4, #0]
 800481c:	1be0      	subs	r0, r4, r7
 800481e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004824 <_ZSt15get_new_handlerv>:
 8004824:	4b02      	ldr	r3, [pc, #8]	; (8004830 <_ZSt15get_new_handlerv+0xc>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	f3bf 8f5b 	dmb	ish
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	200001d4 	.word	0x200001d4

08004834 <abort>:
 8004834:	b508      	push	{r3, lr}
 8004836:	2006      	movs	r0, #6
 8004838:	f000 f986 	bl	8004b48 <raise>
 800483c:	2001      	movs	r0, #1
 800483e:	f7fc feb1 	bl	80015a4 <_exit>
	...

08004844 <__errno>:
 8004844:	4b01      	ldr	r3, [pc, #4]	; (800484c <__errno+0x8>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000014 	.word	0x20000014

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4d0d      	ldr	r5, [pc, #52]	; (8004888 <__libc_init_array+0x38>)
 8004854:	4c0d      	ldr	r4, [pc, #52]	; (800488c <__libc_init_array+0x3c>)
 8004856:	1b64      	subs	r4, r4, r5
 8004858:	10a4      	asrs	r4, r4, #2
 800485a:	2600      	movs	r6, #0
 800485c:	42a6      	cmp	r6, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	4d0b      	ldr	r5, [pc, #44]	; (8004890 <__libc_init_array+0x40>)
 8004862:	4c0c      	ldr	r4, [pc, #48]	; (8004894 <__libc_init_array+0x44>)
 8004864:	f000 f99a 	bl	8004b9c <_init>
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	2600      	movs	r6, #0
 800486e:	42a6      	cmp	r6, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	f855 3b04 	ldr.w	r3, [r5], #4
 8004878:	4798      	blx	r3
 800487a:	3601      	adds	r6, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004882:	4798      	blx	r3
 8004884:	3601      	adds	r6, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	08005af8 	.word	0x08005af8
 800488c:	08005af8 	.word	0x08005af8
 8004890:	08005af8 	.word	0x08005af8
 8004894:	08005afc 	.word	0x08005afc

08004898 <malloc>:
 8004898:	4b02      	ldr	r3, [pc, #8]	; (80048a4 <malloc+0xc>)
 800489a:	4601      	mov	r1, r0
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	f000 b8a7 	b.w	80049f0 <_malloc_r>
 80048a2:	bf00      	nop
 80048a4:	20000014 	.word	0x20000014

080048a8 <free>:
 80048a8:	4b02      	ldr	r3, [pc, #8]	; (80048b4 <free+0xc>)
 80048aa:	4601      	mov	r1, r0
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	f000 b833 	b.w	8004918 <_free_r>
 80048b2:	bf00      	nop
 80048b4:	20000014 	.word	0x20000014

080048b8 <memcpy>:
 80048b8:	440a      	add	r2, r1
 80048ba:	4291      	cmp	r1, r2
 80048bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80048c0:	d100      	bne.n	80048c4 <memcpy+0xc>
 80048c2:	4770      	bx	lr
 80048c4:	b510      	push	{r4, lr}
 80048c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ce:	4291      	cmp	r1, r2
 80048d0:	d1f9      	bne.n	80048c6 <memcpy+0xe>
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <memmove>:
 80048d4:	4288      	cmp	r0, r1
 80048d6:	b510      	push	{r4, lr}
 80048d8:	eb01 0402 	add.w	r4, r1, r2
 80048dc:	d902      	bls.n	80048e4 <memmove+0x10>
 80048de:	4284      	cmp	r4, r0
 80048e0:	4623      	mov	r3, r4
 80048e2:	d807      	bhi.n	80048f4 <memmove+0x20>
 80048e4:	1e43      	subs	r3, r0, #1
 80048e6:	42a1      	cmp	r1, r4
 80048e8:	d008      	beq.n	80048fc <memmove+0x28>
 80048ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048f2:	e7f8      	b.n	80048e6 <memmove+0x12>
 80048f4:	4402      	add	r2, r0
 80048f6:	4601      	mov	r1, r0
 80048f8:	428a      	cmp	r2, r1
 80048fa:	d100      	bne.n	80048fe <memmove+0x2a>
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004906:	e7f7      	b.n	80048f8 <memmove+0x24>

08004908 <memset>:
 8004908:	4402      	add	r2, r0
 800490a:	4603      	mov	r3, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <_free_r>:
 8004918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800491a:	2900      	cmp	r1, #0
 800491c:	d044      	beq.n	80049a8 <_free_r+0x90>
 800491e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004922:	9001      	str	r0, [sp, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f1a1 0404 	sub.w	r4, r1, #4
 800492a:	bfb8      	it	lt
 800492c:	18e4      	addlt	r4, r4, r3
 800492e:	f000 f927 	bl	8004b80 <__malloc_lock>
 8004932:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <_free_r+0x94>)
 8004934:	9801      	ldr	r0, [sp, #4]
 8004936:	6813      	ldr	r3, [r2, #0]
 8004938:	b933      	cbnz	r3, 8004948 <_free_r+0x30>
 800493a:	6063      	str	r3, [r4, #4]
 800493c:	6014      	str	r4, [r2, #0]
 800493e:	b003      	add	sp, #12
 8004940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004944:	f000 b922 	b.w	8004b8c <__malloc_unlock>
 8004948:	42a3      	cmp	r3, r4
 800494a:	d908      	bls.n	800495e <_free_r+0x46>
 800494c:	6825      	ldr	r5, [r4, #0]
 800494e:	1961      	adds	r1, r4, r5
 8004950:	428b      	cmp	r3, r1
 8004952:	bf01      	itttt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	1949      	addeq	r1, r1, r5
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	e7ed      	b.n	800493a <_free_r+0x22>
 800495e:	461a      	mov	r2, r3
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	b10b      	cbz	r3, 8004968 <_free_r+0x50>
 8004964:	42a3      	cmp	r3, r4
 8004966:	d9fa      	bls.n	800495e <_free_r+0x46>
 8004968:	6811      	ldr	r1, [r2, #0]
 800496a:	1855      	adds	r5, r2, r1
 800496c:	42a5      	cmp	r5, r4
 800496e:	d10b      	bne.n	8004988 <_free_r+0x70>
 8004970:	6824      	ldr	r4, [r4, #0]
 8004972:	4421      	add	r1, r4
 8004974:	1854      	adds	r4, r2, r1
 8004976:	42a3      	cmp	r3, r4
 8004978:	6011      	str	r1, [r2, #0]
 800497a:	d1e0      	bne.n	800493e <_free_r+0x26>
 800497c:	681c      	ldr	r4, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	6053      	str	r3, [r2, #4]
 8004982:	4421      	add	r1, r4
 8004984:	6011      	str	r1, [r2, #0]
 8004986:	e7da      	b.n	800493e <_free_r+0x26>
 8004988:	d902      	bls.n	8004990 <_free_r+0x78>
 800498a:	230c      	movs	r3, #12
 800498c:	6003      	str	r3, [r0, #0]
 800498e:	e7d6      	b.n	800493e <_free_r+0x26>
 8004990:	6825      	ldr	r5, [r4, #0]
 8004992:	1961      	adds	r1, r4, r5
 8004994:	428b      	cmp	r3, r1
 8004996:	bf04      	itt	eq
 8004998:	6819      	ldreq	r1, [r3, #0]
 800499a:	685b      	ldreq	r3, [r3, #4]
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	bf04      	itt	eq
 80049a0:	1949      	addeq	r1, r1, r5
 80049a2:	6021      	streq	r1, [r4, #0]
 80049a4:	6054      	str	r4, [r2, #4]
 80049a6:	e7ca      	b.n	800493e <_free_r+0x26>
 80049a8:	b003      	add	sp, #12
 80049aa:	bd30      	pop	{r4, r5, pc}
 80049ac:	200001d8 	.word	0x200001d8

080049b0 <sbrk_aligned>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4e0e      	ldr	r6, [pc, #56]	; (80049ec <sbrk_aligned+0x3c>)
 80049b4:	460c      	mov	r4, r1
 80049b6:	6831      	ldr	r1, [r6, #0]
 80049b8:	4605      	mov	r5, r0
 80049ba:	b911      	cbnz	r1, 80049c2 <sbrk_aligned+0x12>
 80049bc:	f000 f88c 	bl	8004ad8 <_sbrk_r>
 80049c0:	6030      	str	r0, [r6, #0]
 80049c2:	4621      	mov	r1, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 f887 	bl	8004ad8 <_sbrk_r>
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	d00a      	beq.n	80049e4 <sbrk_aligned+0x34>
 80049ce:	1cc4      	adds	r4, r0, #3
 80049d0:	f024 0403 	bic.w	r4, r4, #3
 80049d4:	42a0      	cmp	r0, r4
 80049d6:	d007      	beq.n	80049e8 <sbrk_aligned+0x38>
 80049d8:	1a21      	subs	r1, r4, r0
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 f87c 	bl	8004ad8 <_sbrk_r>
 80049e0:	3001      	adds	r0, #1
 80049e2:	d101      	bne.n	80049e8 <sbrk_aligned+0x38>
 80049e4:	f04f 34ff 	mov.w	r4, #4294967295
 80049e8:	4620      	mov	r0, r4
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	200001dc 	.word	0x200001dc

080049f0 <_malloc_r>:
 80049f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f4:	1ccd      	adds	r5, r1, #3
 80049f6:	f025 0503 	bic.w	r5, r5, #3
 80049fa:	3508      	adds	r5, #8
 80049fc:	2d0c      	cmp	r5, #12
 80049fe:	bf38      	it	cc
 8004a00:	250c      	movcc	r5, #12
 8004a02:	2d00      	cmp	r5, #0
 8004a04:	4607      	mov	r7, r0
 8004a06:	db01      	blt.n	8004a0c <_malloc_r+0x1c>
 8004a08:	42a9      	cmp	r1, r5
 8004a0a:	d905      	bls.n	8004a18 <_malloc_r+0x28>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	2600      	movs	r6, #0
 8004a12:	4630      	mov	r0, r6
 8004a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a18:	4e2e      	ldr	r6, [pc, #184]	; (8004ad4 <_malloc_r+0xe4>)
 8004a1a:	f000 f8b1 	bl	8004b80 <__malloc_lock>
 8004a1e:	6833      	ldr	r3, [r6, #0]
 8004a20:	461c      	mov	r4, r3
 8004a22:	bb34      	cbnz	r4, 8004a72 <_malloc_r+0x82>
 8004a24:	4629      	mov	r1, r5
 8004a26:	4638      	mov	r0, r7
 8004a28:	f7ff ffc2 	bl	80049b0 <sbrk_aligned>
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	4604      	mov	r4, r0
 8004a30:	d14d      	bne.n	8004ace <_malloc_r+0xde>
 8004a32:	6834      	ldr	r4, [r6, #0]
 8004a34:	4626      	mov	r6, r4
 8004a36:	2e00      	cmp	r6, #0
 8004a38:	d140      	bne.n	8004abc <_malloc_r+0xcc>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4638      	mov	r0, r7
 8004a40:	eb04 0803 	add.w	r8, r4, r3
 8004a44:	f000 f848 	bl	8004ad8 <_sbrk_r>
 8004a48:	4580      	cmp	r8, r0
 8004a4a:	d13a      	bne.n	8004ac2 <_malloc_r+0xd2>
 8004a4c:	6821      	ldr	r1, [r4, #0]
 8004a4e:	3503      	adds	r5, #3
 8004a50:	1a6d      	subs	r5, r5, r1
 8004a52:	f025 0503 	bic.w	r5, r5, #3
 8004a56:	3508      	adds	r5, #8
 8004a58:	2d0c      	cmp	r5, #12
 8004a5a:	bf38      	it	cc
 8004a5c:	250c      	movcc	r5, #12
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4638      	mov	r0, r7
 8004a62:	f7ff ffa5 	bl	80049b0 <sbrk_aligned>
 8004a66:	3001      	adds	r0, #1
 8004a68:	d02b      	beq.n	8004ac2 <_malloc_r+0xd2>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	442b      	add	r3, r5
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	e00e      	b.n	8004a90 <_malloc_r+0xa0>
 8004a72:	6822      	ldr	r2, [r4, #0]
 8004a74:	1b52      	subs	r2, r2, r5
 8004a76:	d41e      	bmi.n	8004ab6 <_malloc_r+0xc6>
 8004a78:	2a0b      	cmp	r2, #11
 8004a7a:	d916      	bls.n	8004aaa <_malloc_r+0xba>
 8004a7c:	1961      	adds	r1, r4, r5
 8004a7e:	42a3      	cmp	r3, r4
 8004a80:	6025      	str	r5, [r4, #0]
 8004a82:	bf18      	it	ne
 8004a84:	6059      	strne	r1, [r3, #4]
 8004a86:	6863      	ldr	r3, [r4, #4]
 8004a88:	bf08      	it	eq
 8004a8a:	6031      	streq	r1, [r6, #0]
 8004a8c:	5162      	str	r2, [r4, r5]
 8004a8e:	604b      	str	r3, [r1, #4]
 8004a90:	4638      	mov	r0, r7
 8004a92:	f104 060b 	add.w	r6, r4, #11
 8004a96:	f000 f879 	bl	8004b8c <__malloc_unlock>
 8004a9a:	f026 0607 	bic.w	r6, r6, #7
 8004a9e:	1d23      	adds	r3, r4, #4
 8004aa0:	1af2      	subs	r2, r6, r3
 8004aa2:	d0b6      	beq.n	8004a12 <_malloc_r+0x22>
 8004aa4:	1b9b      	subs	r3, r3, r6
 8004aa6:	50a3      	str	r3, [r4, r2]
 8004aa8:	e7b3      	b.n	8004a12 <_malloc_r+0x22>
 8004aaa:	6862      	ldr	r2, [r4, #4]
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	bf0c      	ite	eq
 8004ab0:	6032      	streq	r2, [r6, #0]
 8004ab2:	605a      	strne	r2, [r3, #4]
 8004ab4:	e7ec      	b.n	8004a90 <_malloc_r+0xa0>
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	6864      	ldr	r4, [r4, #4]
 8004aba:	e7b2      	b.n	8004a22 <_malloc_r+0x32>
 8004abc:	4634      	mov	r4, r6
 8004abe:	6876      	ldr	r6, [r6, #4]
 8004ac0:	e7b9      	b.n	8004a36 <_malloc_r+0x46>
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f000 f860 	bl	8004b8c <__malloc_unlock>
 8004acc:	e7a1      	b.n	8004a12 <_malloc_r+0x22>
 8004ace:	6025      	str	r5, [r4, #0]
 8004ad0:	e7de      	b.n	8004a90 <_malloc_r+0xa0>
 8004ad2:	bf00      	nop
 8004ad4:	200001d8 	.word	0x200001d8

08004ad8 <_sbrk_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d06      	ldr	r5, [pc, #24]	; (8004af4 <_sbrk_r+0x1c>)
 8004adc:	2300      	movs	r3, #0
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	f7fc fd68 	bl	80015b8 <_sbrk>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_sbrk_r+0x1a>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_sbrk_r+0x1a>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	200001e0 	.word	0x200001e0

08004af8 <_raise_r>:
 8004af8:	291f      	cmp	r1, #31
 8004afa:	b538      	push	{r3, r4, r5, lr}
 8004afc:	4604      	mov	r4, r0
 8004afe:	460d      	mov	r5, r1
 8004b00:	d904      	bls.n	8004b0c <_raise_r+0x14>
 8004b02:	2316      	movs	r3, #22
 8004b04:	6003      	str	r3, [r0, #0]
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b0e:	b112      	cbz	r2, 8004b16 <_raise_r+0x1e>
 8004b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b14:	b94b      	cbnz	r3, 8004b2a <_raise_r+0x32>
 8004b16:	4620      	mov	r0, r4
 8004b18:	f000 f830 	bl	8004b7c <_getpid_r>
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	4601      	mov	r1, r0
 8004b20:	4620      	mov	r0, r4
 8004b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b26:	f000 b817 	b.w	8004b58 <_kill_r>
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d00a      	beq.n	8004b44 <_raise_r+0x4c>
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	d103      	bne.n	8004b3a <_raise_r+0x42>
 8004b32:	2316      	movs	r3, #22
 8004b34:	6003      	str	r3, [r0, #0]
 8004b36:	2001      	movs	r0, #1
 8004b38:	e7e7      	b.n	8004b0a <_raise_r+0x12>
 8004b3a:	2400      	movs	r4, #0
 8004b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b40:	4628      	mov	r0, r5
 8004b42:	4798      	blx	r3
 8004b44:	2000      	movs	r0, #0
 8004b46:	e7e0      	b.n	8004b0a <_raise_r+0x12>

08004b48 <raise>:
 8004b48:	4b02      	ldr	r3, [pc, #8]	; (8004b54 <raise+0xc>)
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	f7ff bfd3 	b.w	8004af8 <_raise_r>
 8004b52:	bf00      	nop
 8004b54:	20000014 	.word	0x20000014

08004b58 <_kill_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d07      	ldr	r5, [pc, #28]	; (8004b78 <_kill_r+0x20>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	f7fc fd0d 	bl	8001584 <_kill>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d102      	bne.n	8004b74 <_kill_r+0x1c>
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	b103      	cbz	r3, 8004b74 <_kill_r+0x1c>
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	bd38      	pop	{r3, r4, r5, pc}
 8004b76:	bf00      	nop
 8004b78:	200001e0 	.word	0x200001e0

08004b7c <_getpid_r>:
 8004b7c:	f7fc bcfa 	b.w	8001574 <_getpid>

08004b80 <__malloc_lock>:
 8004b80:	4801      	ldr	r0, [pc, #4]	; (8004b88 <__malloc_lock+0x8>)
 8004b82:	f000 b809 	b.w	8004b98 <__retarget_lock_acquire_recursive>
 8004b86:	bf00      	nop
 8004b88:	200001e4 	.word	0x200001e4

08004b8c <__malloc_unlock>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	; (8004b94 <__malloc_unlock+0x8>)
 8004b8e:	f000 b804 	b.w	8004b9a <__retarget_lock_release_recursive>
 8004b92:	bf00      	nop
 8004b94:	200001e4 	.word	0x200001e4

08004b98 <__retarget_lock_acquire_recursive>:
 8004b98:	4770      	bx	lr

08004b9a <__retarget_lock_release_recursive>:
 8004b9a:	4770      	bx	lr

08004b9c <_init>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr

08004ba8 <_fini>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr
